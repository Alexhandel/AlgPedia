ABOUT
In computer science, the Edmonds–Karp algorithm is an implementation of the Ford–Fulkerson method for computing the maximum flow in a flow network in O(V E2) time. The algorithm was first published by Yefim Dinitz in 1970[1][2] and independently published by Jack Edmonds and Richard Karp in 1972.[3] Dinic's algorithm includes additional techniques that reduce the running time to O(V2E).
FULL TEXT
In computer science, the Edmonds–Karp algorithm is an implementation of the Ford–Fulkerson method for computing the maximum flow in a flow network in O(V E2) time. The algorithm was first published by Yefim Dinitz in 1970[1][2] and independently published by Jack Edmonds and Richard Karp in 1972.[3] Dinic's algorithm includes additional techniques that reduce the running time to O(V2E).


The algorithm is identical to the Ford–Fulkerson algorithm, except that the search order when finding the augmenting path is defined. The path found must be a shortest path that has available capacity. This can be found by a breadth-first search, as we let edges have unit length. The running time of O(V E2) is found by showing that each augmenting path can be found in O(E) time, that every time at least one of the E edges becomes saturated (an edge which has the maximum possible flow), that the distance from the saturated edge to the source along the augmenting path must be longer than last time it was saturated, and that the length is at most V. Another property of this algorithm is that the length of the shortest augmenting path increases monotonically. There is an accessible proof in Introduction to Algorithms.[4]

Given a network of seven nodes, source A, sink G, and capacities as shown below:

In the pairs 



f

/

c


{\displaystyle f/c}

 written on the edges, 



f


{\displaystyle f}

 is the current flow, and 



c


{\displaystyle c}

 is the capacity. The residual capacity from 



u


{\displaystyle u}

 to 



v


{\displaystyle v}

 is 




c

f


(
u
,
v
)
=
c
(
u
,
v
)
−
f
(
u
,
v
)


{\displaystyle c_{f}(u,v)=c(u,v)-f(u,v)}

, the total capacity, minus the flow that is already used. If the net flow from 



u


{\displaystyle u}

 to 



v


{\displaystyle v}

 is negative, it contributes to the residual capacity.
Notice how the length of the augmenting path found by the algorithm (in red) never decreases. The paths found are the shortest possible. The flow found is equal to the capacity across the minimum cut in the graph separating the source and the sink. There is only one minimal cut in this graph, partitioning the nodes into the sets 



{
A
,
B
,
C
,
E
}


{\displaystyle \{A,B,C,E\}}

 and 



{
D
,
F
,
G
}


{\displaystyle \{D,F,G\}}

, with the capacity