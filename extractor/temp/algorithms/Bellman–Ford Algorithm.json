{
    "about": "The Bellman\u2013Ford algorithm is an algorithm that computes shortest paths from a single source vertex to all of the other vertices in a weighted digraph.[1] It is slower than Dijkstra's algorithm for the same problem, but more versatile, as it is capable of handling graphs in which some of the edge weights are negative numbers. The algorithm was first proposed by Alfonso Shimbel in 1955, but is instead named after Richard Bellman and Lester Ford, Jr., who published it in 1958 and 1956, respectively.[2] Edward F. Moore also published the same algorithm in 1957, and for this reason it is also sometimes called the Bellman\u2013Ford\u2013Moore algorithm.[1]", 
    "name": "Bellman\u2013Ford Algorithm", 
    "classification": "Graph Algorithms", 
    "full_text": "The Bellman\u2013Ford algorithm is an algorithm that computes shortest paths from a single source vertex to all of the other vertices in a weighted digraph.[1] It is slower than Dijkstra's algorithm for the same problem, but more versatile, as it is capable of handling graphs in which some of the edge weights are negative numbers. The algorithm was first proposed by Alfonso Shimbel in 1955, but is instead named after Richard Bellman and Lester Ford, Jr., who published it in 1958 and 1956, respectively.[2] Edward F. Moore also published the same algorithm in 1957, and for this reason it is also sometimes called the Bellman\u2013Ford\u2013Moore algorithm.[1]\nNegative edge weights are found in various applications of graphs, hence the usefulness of this algorithm.[3] If a graph contains a \"negative cycle\" (i.e. a cycle whose edges sum to a negative value) that is reachable from the source, then there is no cheapest path: any path that has a point on the negative cycle can be made cheaper by one more walk around the negative cycle. In such a case, the Bellman\u2013Ford algorithm can detect negative cycles and report their existence.[1][4]\n\n\nLike Dijkstra's Algorithm, Bellman\u2013Ford is based on the principle of relaxation, in which an approximation to the correct distance is gradually replaced by more accurate values until eventually reaching the optimum solution. In both algorithms, the approximate distance to each vertex is always an overestimate of the true distance, and is replaced by the minimum of its old value with the length of a newly found path. However, Dijkstra's algorithm uses a priority queue to greedily select the closest vertex that has not yet been processed, and performs this relaxation process on all of its outgoing edges; by contrast, the Bellman\u2013Ford algorithm simply relaxes all the edges, and does this \n\n\n\n\n|\n\nV\n\n|\n\n\u2212\n1\n\n\n{\\displaystyle |V|-1}\n\n times, where \n\n\n\n\n|\n\nV\n\n|\n\n\n\n{\\displaystyle |V|}\n\n is the number of vertices in the graph. In each of these repetitions, the number of vertices with correctly calculated distances grows, from which it follows that eventually all vertices will have their correct distances. This method allows the Bellman\u2013Ford algorithm to be applied to a wider class of inputs than Dijkstra.\nBellman\u2013Ford runs in \n\n\n\nO\n(\n\n|\n\nV\n\n|\n\n\u22c5\n\n|\n\nE\n\n|\n\n)\n\n\n{\\displaystyle O(|V|\\cdot |E|)}\n\n time, where \n\n\n\n\n|\n\nV\n\n|\n\n\n\n{\\displaystyle |V|}\n\n and \n\n\n\n\n|\n\nE\n\n|\n\n\n\n{\\displaystyle |E|}\n\n are the number of vertices and edges respectively.\n\nSimply put, the algorithm initializes the distance to the source to 0 and all other nodes to infinity. Then for all edges, if the distance to the destination can be shortened by taking the edge, the distance is updated to the new lower value. At each iteration \n\n\n\ni\n\n\n{\\displaystyle i}\n\n that the edges are scanned, the algorithm finds all shortest paths of at most length \n\n\n\ni\n\n\n{\\displaystyle i}\n\n edges (and possibly some paths longer than \n\n\n\ni\n\n\n{\\displaystyle i}\n\n edges). Since the longest possible path without a cycle can be \n\n\n\n\n|\n\nV\n\n|\n\n\u2212\n1\n\n\n{\\displaystyle |V|-1}\n\n edges, the edges must be scanned \n\n\n\n\n|\n\nV\n\n|\n\n\u2212\n1\n\n\n{\\displaystyle |V|-1}\n\n times to ensure the shortest path has been found for all nodes. A final scan of all the edges is performed and if any distance is updated, then a path of length \n\n\n\n\n|\n\nV\n\n|\n\n\n\n{\\displaystyle |V|}\n\n edges has been found which can only occur if at least one negative cycle exists in the graph.\nThe correctness of the algorithm can be shown by induction. The precise statement shown by induction is:\nLemma. After i repetitions of for loop:\nProof. For the base case of induction, consider i=0 and the moment before for loop is executed for the first time. Then, for the source vertex, source.distance = 0, which is correct. For other vertices u, u.distance = infinity, which is also correct because there is no path from source to u with 0 edges.\nFor the inductive case, we first prove the first part. Consider a moment when a vertex's distance is updated by v.distance\u00a0:= u.distance + uv.weight. By inductive assumption, u.distance is the length of some path from source to u. Then u.distance + uv.weight is the length of the path from source to v that follows the path from source to u and then goes to v.\nFor the second part, consider the shortest path from source to u with at most i edges. Let v be the last vertex before u on this path. Then, the part of the path from source to v is the shortest path from source to v with at most i-1 edges. By inductive assumption, v.distance after i\u22121 iterations is at most the length of this path. Therefore, uv.weight + v.distance is at most the length of the path from s to u. In the ith iteration, u.distance gets compared with uv.weight + v.distance, and is set equal to it if uv.weight + v.distance was smaller. Therefore, after i iteration, u.distance is at most the length of the shortest path from source to u that uses at most i edges.\nIf there are no negative-weight cycles, then every shortest path visits each vertex at most once, so at step 3 no further improvements can be made. Conversely, suppose no improvement can be made. Then for any cycle with vertices v[0], ..., v[k\u22121],\nv[i].distance <= v[i-1 (mod k)].distance + v[i-1 (mod k)]v[i].weight\nSumming around the cycle, the v[i].distance and v[i\u22121 (mod k)].distance terms cancel, leaving\n0 <= sum from 1 to k of v[i-1 (mod k)]v[i].weight\nI.e., every cycle has nonnegative weight.\nWhen the algorithm is used to find shortest paths, the existence of negative cycles is a problem, preventing the algorithm from finding a correct answer. However, since it terminates upon finding a negative cycle, the Bellman\u2013Ford algorithm can be used for applications in which this is the target to be sought - for example in cycle-cancelling techniques in network flow analysis.[1]\nA distributed variant of the Bellman\u2013Ford algorithm is used in distance-vector routing protocols, for example the Routing Information Protocol (RIP). The algorithm is distributed because it involves a number of nodes (routers) within an Autonomous system, a collection of IP networks typically owned by an ISP. It consists of the following steps:\nThe main disadvantages of the Bellman\u2013Ford algorithm in this setting are as follows:\nThe Bellman\u2013Ford algorithm may be improved in practice (although not in the worst case) by the observation that, if an iteration of the main loop of the algorithm terminates without making any changes, the algorithm can be immediately terminated, as subsequent iterations will not make any more changes. With this early termination condition, the main loop may in some cases use many fewer than |\u200aV\u200a|\u00a0\u2212\u00a01 iterations, even though the worst case of the algorithm remains unchanged.\nYen (1970) described two more improvements to the Bellman\u2013Ford algorithm for a graph without negative-weight cycles; again, while making the algorithm faster in practice, they do not change its \n\n\n\nO\n(\n\n|\n\nV\n\n|\n\n\u22c5\n\n|\n\nE\n\n|\n\n)\n\n\n{\\displaystyle O(|V|\\cdot |E|)}\n\n worst case time bound. His first improvement reduces the number of relaxation steps that need to be performed within each iteration of the algorithm. If a vertex v has a distance value that has not changed since the last time the edges out of v were relaxed, then there is no need to relax the edges out of v a second time. In this way, as the number of vertices with correct distance values grows, the number whose outgoing edges that need to be relaxed in each iteration shrinks, leading to a constant-factor savings in time for dense graphs.\nYen's second improvement first assigns some arbitrary linear order on all vertices and then partitions the set of all edges into two subsets. The first subset, Ef, contains all edges (vi, vj) such that i < j; the second, Eb, contains edges (vi, vj) such that i > j. Each vertex is visited in the order v1, v2, ..., v|V|, relaxing each outgoing edge from that vertex in Ef. Each vertex is then visited in the order v|V|, v|V|\u22121, ..., v1, relaxing each outgoing edge from that vertex in Eb. Each iteration of the main loop of the algorithm, after the first one, adds at least two edges to the set of edges whose relaxed distances match the correct shortest path distances: one from Ef and one from Eb. This modification reduces the worst-case number of iterations of the main loop of the algorithm from |\u200aV\u200a|\u00a0\u2212\u00a01 to \n\n\n\n\n|\n\nV\n\n|\n\n\n/\n\n2\n\n\n{\\displaystyle |V|/2}\n\n.[5][6]\nAnother improvement, by Bannister & Eppstein (2012), replaces the arbitrary linear order of the vertices used in Yen's second improvement by a random permutation. This change makes the worst case for Yen's improvement (in which the edges of a shortest path strictly alternate between the two subsets Ef and Eb) very unlikely to happen. With a randomly permuted vertex ordering, the expected number of iterations needed in the main loop is at most \n\n\n\n\n|\n\nV\n\n|\n\n\n/\n\n3\n\n\n{\\displaystyle |V|/3}\n\n.[6]", 
    "dbpedia_url": "http://dbpedia.org/resource/Bellman\u2013Ford_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Bellman\u2013Ford_algorithm\n"
}