{
    "about": "In numerical optimization, the Broyden\u2013Fletcher\u2013Goldfarb\u2013Shanno (BFGS) algorithm is an iterative method for solving unconstrained nonlinear optimization problems.", 
    "name": "Broyden\u2013Fletcher\u2013Goldfarb\u2013Shanno Algorithm", 
    "classification": "Optimization Algorithms And Methods", 
    "full_text": "In numerical optimization, the Broyden\u2013Fletcher\u2013Goldfarb\u2013Shanno (BFGS) algorithm is an iterative method for solving unconstrained nonlinear optimization problems.\nThe BFGS method approximates Newton's method, a class of hill-climbing optimization techniques that seeks a stationary point of a (preferably twice continuously differentiable) function. For such problems, a necessary condition for optimality is that the gradient be zero. Newton's method and the BFGS methods are not guaranteed to converge unless the function has a quadratic Taylor expansion near an optimum. These methods use both the first and second derivatives of the function. However, BFGS has proven to have good performance even for non-smooth optimizations.[1]\nIn quasi-Newton methods, the Hessian matrix of second derivatives doesn't need to be evaluated directly. Instead, the Hessian matrix is approximated using updates specified by gradient evaluations (or approximate gradient evaluations). Quasi-Newton methods are generalizations of the secant method to find the root of the first derivative for multidimensional problems. In multi-dimensional problems, the secant equation does not specify a unique solution, and quasi-Newton methods differ in how they constrain the solution. The BFGS method is one of the most popular members of this class.[2] Also in common use is L-BFGS, which is a limited-memory version of BFGS that is particularly suited to problems with very large numbers of variables (e.g., >1000). The BFGS-B[3] variant handles simple box constraints.\n\n\nThe search direction pk at stage k is given by the solution of the analogue of the Newton equation\nwhere \n\n\n\n\nB\n\nk\n\n\n\n\n{\\displaystyle B_{k}}\n\n is an approximation to the Hessian matrix, which is updated iteratively at each stage, and \n\n\n\n\u2207\nf\n(\n\n\nx\n\n\nk\n\n\n)\n\n\n{\\displaystyle \\nabla f(\\mathbf {x} _{k})}\n\n is the gradient of the function evaluated at xk. A line search in the direction pk is then used to find the next point xk+1. Instead of requiring the full Hessian matrix at the point xk+1 to be computed as Bk+1, the approximate Hessian at stage k is updated by the addition of two matrices:\nBoth Uk and Vk are symmetric rank-one matrices, but their sum is a rank-two update matrix.\nThe quasi-Newton condition imposed on this update is\nFrom an initial guess \n\n\n\n\n\nx\n\n\n0\n\n\n\n\n{\\displaystyle \\mathbf {x} _{0}}\n\n and an approximate Hessian matrix \n\n\n\n\nB\n\n0\n\n\n\n\n{\\displaystyle B_{0}}\n\n the following steps are repeated as \n\n\n\n\n\nx\n\n\nk\n\n\n\n\n{\\displaystyle \\mathbf {x} _{k}}\n\n converges to the solution:\n\n\n\n\nf\n(\n\nx\n\n)\n\n\n{\\displaystyle f(\\mathbf {x} )}\n\n denotes the objective function to be minimized. Convergence can be checked by observing the norm of the gradient, \n\n\n\n\n|\n\u2207\nf\n(\n\n\nx\n\n\nk\n\n\n)\n|\n\n\n\n{\\displaystyle \\left|\\nabla f(\\mathbf {x} _{k})\\right|}\n\n. Practically, \n\n\n\n\nB\n\n0\n\n\n\n\n{\\displaystyle B_{0}}\n\n can be initialized with \n\n\n\n\nB\n\n0\n\n\n=\nI\n\n\n{\\displaystyle B_{0}=I}\n\n, so that the first step will be equivalent to a gradient descent, but further steps are more and more refined by \n\n\n\n\nB\n\nk\n\n\n\n\n{\\displaystyle B_{k}}\n\n, the approximation to the Hessian.\nThe first step of the algorithm is carried out using the inverse of the matrix \n\n\n\n\nB\n\nk\n\n\n\n\n{\\displaystyle B_{k}}\n\n, which can be obtained efficiently by applying the Sherman\u2013Morrison formula to the step 5 of the algorithm, giving\nThis can be computed efficiently without temporary matrices, recognizing that \n\n\n\n\nB\n\nk\n\n\n\u2212\n1\n\n\n\n\n{\\displaystyle B_{k}^{-1}}\n\n is symmetric, and that \n\n\n\n\n\ny\n\n\nk\n\n\n\nT\n\n\n\n\nB\n\nk\n\n\n\u2212\n1\n\n\n\n\ny\n\n\nk\n\n\n\n\n{\\displaystyle \\mathbf {y} _{k}^{\\mathrm {T} }B_{k}^{-1}\\mathbf {y} _{k}}\n\n and \n\n\n\n\n\ns\n\n\nk\n\n\n\nT\n\n\n\n\n\ny\n\n\nk\n\n\n\n\n{\\displaystyle \\mathbf {s} _{k}^{\\mathrm {T} }\\mathbf {y} _{k}}\n\n are scalar, using an expansion such as\nIn statistical estimation problems (such as maximum likelihood or Bayesian inference), credible intervals or confidence intervals for the solution can be estimated from the inverse of the final Hessian matrix. However, these quantities are technically defined by the true Hessian matrix, and the BFGS approximation may not converge to the true Hessian matrix.\nThe GSL implements BFGS as gsl_multimin_fdfminimizer_vector_bfgs2. Ceres Solver implements both BFGS and L-BFGS. In SciPy, the scipy.optimize.fmin_bfgs function implements BFGS. It is also possible to run BFGS using any of the L-BFGS algorithms by setting the parameter L to a very large number.\nOctave uses BFGS with a double-dogleg approximation to the cubic line search.\nIn R, the BFGS algorithm (and the L-BFGS-B version that allows box constraints) is implemented as an option of the base function optim().\nIn the MATLAB Optimization Toolbox, the fminunc function uses BFGS with cubic line search when the problem size is set to \"medium scale.\"\nA high-precision arithmetic version of BFGS (pBFGS), implemented in C++ and integrated with the high-precision arithmetic package ARPREC is robust against numerical instability (e.g. round-off errors).\nAnother C++ implementation of BFGS (along with L-BFGS, L-BFGS-B, CG, and Newton's method) using Eigen (C++ library) are available on GitHub under the MIT License here.\nBFGS and L-BFGS are also implemented in C as part of the open-source Gnu Regression, Econometrics and Time-series Library (gretl).", 
    "dbpedia_url": "http://dbpedia.org/resource/Broyden\u2013Fletcher\u2013Goldfarb\u2013Shanno_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Broyden\u2013Fletcher\u2013Goldfarb\u2013Shanno_algorithm\n"
}