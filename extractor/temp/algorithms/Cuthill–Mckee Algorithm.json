{
    "about": "In the mathematical subfield of matrix theory, the Cuthill\u2013McKee algorithm (CM), named for Elizabeth Cuthill and J. McKee,[1] is an algorithm to permute a sparse matrix that has a symmetric sparsity pattern into a band matrix form with a small bandwidth. The reverse Cuthill\u2013McKee algorithm (RCM) due to Alan George is the same algorithm but with the resulting index numbers reversed.[2] In practice this generally results in less fill-in than the CM ordering when Gaussian elimination is applied.[3]", 
    "name": "Cuthill\u2013Mckee Algorithm", 
    "classification": "Graph Algorithms", 
    "full_text": "In the mathematical subfield of matrix theory, the Cuthill\u2013McKee algorithm (CM), named for Elizabeth Cuthill and J. McKee,[1] is an algorithm to permute a sparse matrix that has a symmetric sparsity pattern into a band matrix form with a small bandwidth. The reverse Cuthill\u2013McKee algorithm (RCM) due to Alan George is the same algorithm but with the resulting index numbers reversed.[2] In practice this generally results in less fill-in than the CM ordering when Gaussian elimination is applied.[3]\nThe Cuthill McKee algorithm is a variant of the standard breadth-first search algorithm used in graph algorithms. It starts with a peripheral node and then generates levels \n\n\n\n\nR\n\ni\n\n\n\n\n{\\displaystyle R_{i}}\n\n for \n\n\n\ni\n=\n1\n,\n2\n,\n.\n.\n\n\n{\\displaystyle i=1,2,..}\n\n until all nodes are exhausted. The set \n\n\n\n\nR\n\ni\n+\n1\n\n\n\n\n{\\displaystyle R_{i+1}}\n\n is created from set \n\n\n\n\nR\n\ni\n\n\n\n\n{\\displaystyle R_{i}}\n\n by listing all vertices adjacent to all nodes in \n\n\n\n\nR\n\ni\n\n\n\n\n{\\displaystyle R_{i}}\n\n. These nodes are listed in increasing degree. This last detail is the only difference with the breadth-first search algorithm.\nGiven a symmetric \n\n\n\nn\n\u00d7\nn\n\n\n{\\displaystyle n\\times n}\n\n matrix we visualize the matrix as the adjacency matrix of a graph. The Cuthill\u2013McKee algorithm is then a relabeling of the vertices of the graph to reduce the bandwidth of the adjacency matrix.\nThe algorithm produces an ordered n-tuple \n\n\n\nR\n\n\n{\\displaystyle R}\n\n of vertices which is the new order of the vertices.\nFirst we choose a peripheral vertex (the vertex with the lowest degree) \n\n\n\nx\n\n\n{\\displaystyle x}\n\n and set \n\n\n\nR\n:=\n(\n{\nx\n}\n)\n\n\n{\\displaystyle R:=(\\{x\\})}\n\n.\nThen for \n\n\n\ni\n=\n1\n,\n2\n,\n\u2026\n\n\n{\\displaystyle i=1,2,\\dots }\n\n we iterate the following steps while \n\n\n\n\n|\n\nR\n\n|\n\n<\nn\n\n\n{\\displaystyle |R|<n}\n\n\nIn other words, number the vertices according to a particular breadth-first traversal where neighboring vertices are visited in order from lowest to highest vertex order.", 
    "dbpedia_url": "http://dbpedia.org/resource/Cuthill\u2013McKee_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Cuthill\u2013McKee_algorithm\n"
}