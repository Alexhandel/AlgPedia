{
    "about": "The Deutsch\u2013Jozsa algorithm is a quantum algorithm, proposed by David Deutsch and Richard Jozsa in 1992[1] with improvements by Richard Cleve, Artur Ekert, Chiara Macchiavello, and Michele Mosca in 1998.[2] Although of little practical use, it is one of the first examples of a quantum algorithm that is exponentially faster than any possible deterministic classical algorithm. It is also a deterministic algorithm, meaning that it always produces an answer, and that answer is always correct.", 
    "name": "Deutsch\u2013Jozsa Algorithm", 
    "classification": "Quantum Algorithms", 
    "full_text": "The Deutsch\u2013Jozsa algorithm is a quantum algorithm, proposed by David Deutsch and Richard Jozsa in 1992[1] with improvements by Richard Cleve, Artur Ekert, Chiara Macchiavello, and Michele Mosca in 1998.[2] Although of little practical use, it is one of the first examples of a quantum algorithm that is exponentially faster than any possible deterministic classical algorithm. It is also a deterministic algorithm, meaning that it always produces an answer, and that answer is always correct.\n\n\nIn the Deutsch-Jozsa problem, we are given a black box quantum computer known as an oracle that implements some function \n\n\n\nf\n:\n{\n0\n,\n1\n\n}\n\nn\n\n\n\u2192\n{\n0\n,\n1\n}\n\n\n{\\displaystyle f:\\{0,1\\}^{n}\\rightarrow \\{0,1\\}}\n\n. In layman's terms, it takes n-digit binary values as input and produces either a 0 or a 1 as output for each such value. We are promised that the function is either constant (0 on all inputs or 1 on all inputs) or balanced[3] (returns 1 for half of the input domain and 0 for the other half); the task then is to determine if \n\n\n\nf\n\n\n{\\displaystyle f}\n\n is constant or balanced by using the oracle.\nThe Deutsch\u2013Jozsa problem is specifically designed to be easy for a quantum algorithm and hard for any deterministic classical algorithm. The motivation is to show a black box problem that can be solved efficiently by a quantum computer with no error, whereas a deterministic classical computer would need exponentially many queries to the black box to solve the problem. More formally, it yields an oracle relative to which EQP, the class of problems that can be solved exactly in polynomial time on a quantum computer, and P are different.\nSince the problem is easy to solve on a probabilistic classical computer, it does not yield an oracle separation with BPP, the class of problems that can be solved with bounded error in polynomial time on a probabilistic classical computer. Simon's problem is an example of a problem that yields an oracle separation between BQP and BPP.\nFor a conventional deterministic algorithm where n is number of bits, \n\n\n\n\n2\n\nn\n\u2212\n1\n\n\n+\n1\n\n\n{\\displaystyle 2^{n-1}+1}\n\n evaluations of \n\n\n\nf\n\n\n{\\displaystyle f}\n\n will be required in the worst case. To prove that \n\n\n\nf\n\n\n{\\displaystyle f}\n\n is constant, just over half the set of inputs must be evaluated and their outputs found to be identical (remembering that the function is guaranteed to be either balanced or constant, not somewhere in between). The best case occurs where the function is balanced and the first two output values that happen to be selected are different. For a conventional randomized algorithm, a constant \n\n\n\nk\n\n\n{\\displaystyle k}\n\n evaluations of the function suffices to produce the correct answer with a high probability (failing with probability \n\n\n\n\u03f5\n\u2264\n1\n\n/\n\n\n2\n\nk\n\u2212\n1\n\n\n\n\n{\\displaystyle \\epsilon \\leq 1/2^{k-1}}\n\n). However, \n\n\n\nk\n=\n\n2\n\nn\n\u2212\n1\n\n\n+\n1\n\n\n{\\displaystyle k=2^{n-1}+1}\n\n evaluations are still required if we want an answer that is always correct. The Deutsch-Jozsa quantum algorithm produces an answer that is always correct with a single evaluation of \n\n\n\nf\n\n\n{\\displaystyle f}\n\n.\nThe Deutsch\u2013Jozsa Algorithm generalizes earlier (1985) work by David Deutsch, which provided a solution for the simple case.\nSpecifically we were given a boolean function whose input is 1 bit, \n\n\n\nf\n:\n{\n0\n,\n1\n}\n\u2192\n{\n0\n,\n1\n}\n\n\n{\\displaystyle f:\\{0,1\\}\\rightarrow \\{0,1\\}}\n\n and asked if it is constant.[4]\nThe algorithm as Deutsch had originally proposed it was not, in fact, deterministic. The algorithm was successful with a probability of one half. In 1992, Deutsch and Jozsa produced a deterministic algorithm which was generalized to a function which takes \n\n\n\nn\n\n\n{\\displaystyle n}\n\n bits for its input. Unlike Deutsch's Algorithm, this algorithm required two function evaluations instead of only one.\nFurther improvements to the Deutsch\u2013Jozsa algorithm were made by Cleve et al.,[2] resulting in an algorithm that is both deterministic and requires only a single query of \n\n\n\nf\n\n\n{\\displaystyle f}\n\n. This algorithm is still referred to as Deutsch\u2013Jozsa algorithm in honour of the groundbreaking techniques they employed.[2]\nThe Deutsch\u2013Jozsa algorithm provided inspiration for Shor's algorithm and Grover's algorithm, two of the most revolutionary quantum algorithms.[5][6]\nFor the Deutsch\u2013Jozsa algorithm to work, the oracle computing f(x) from x has to be a quantum oracle which doesn't decohere x. It also mustn't leave any copy of x lying around at the end of the oracle call.\nThe algorithm begins with the n+1 bit state \n\n\n\n\n|\n\n0\n\n\u27e9\n\n\u2297\nn\n\n\n\n|\n\n1\n\u27e9\n\n\n{\\displaystyle |0\\rangle ^{\\otimes n}|1\\rangle }\n\n. That is, the first n bits are each in the state \n\n\n\n\n|\n\n0\n\u27e9\n\n\n{\\displaystyle |0\\rangle }\n\n and the final bit is \n\n\n\n\n|\n\n1\n\u27e9\n\n\n{\\displaystyle |1\\rangle }\n\n. A Hadamard transform is applied to each bit to obtain the state\nWe have the function f implemented as a quantum oracle. The oracle maps the state \n\n\n\n\n|\n\nx\n\u27e9\n\n|\n\ny\n\u27e9\n\n\n{\\displaystyle |x\\rangle |y\\rangle }\n\n to \n\n\n\n\n|\n\nx\n\u27e9\n\n|\n\ny\n\u2295\nf\n(\nx\n)\n\u27e9\n\n\n{\\displaystyle |x\\rangle |y\\oplus f(x)\\rangle }\n\n, where \n\n\n\n\u2295\n\n\n{\\displaystyle \\oplus }\n\n is addition modulo 2 (see below for details of implementation). Applying the quantum oracle gives\nFor each x, f(x) is either 0 or 1. A quick check of these two possibilities yields\nAt this point the last qubit may be ignored. We apply a Hadamard transform to each qubit to obtain\nwhere \n\n\n\nx\n\u22c5\ny\n=\n\nx\n\n0\n\n\n\ny\n\n0\n\n\n\u2295\n\nx\n\n1\n\n\n\ny\n\n1\n\n\n\u2295\n\u22ef\n\u2295\n\nx\n\nn\n\u2212\n1\n\n\n\ny\n\nn\n\u2212\n1\n\n\n\n\n{\\displaystyle x\\cdot y=x_{0}y_{0}\\oplus x_{1}y_{1}\\oplus \\cdots \\oplus x_{n-1}y_{n-1}}\n\n is the sum of the bitwise product.\nFinally we examine the probability of measuring \n\n\n\n\n|\n\n0\n\n\u27e9\n\n\u2297\nn\n\n\n\n\n{\\displaystyle |0\\rangle ^{\\otimes n}}\n\n,\nwhich evaluates to 1 if f(x) is constant (constructive interference) and 0 if f(x) is balanced (destructive interference).\nDeutsch's algorithm is a special case of the general Deutsch\u2013Jozsa algorithm. We need to check the condition \n\n\n\nf\n(\n0\n)\n=\nf\n(\n1\n)\n\n\n{\\displaystyle f(0)=f(1)}\n\n. It is equivalent to check \n\n\n\nf\n(\n0\n)\n\u2295\nf\n(\n1\n)\n\n\n{\\displaystyle f(0)\\oplus f(1)}\n\n (where \n\n\n\n\u2295\n\n\n{\\displaystyle \\oplus }\n\n is addition modulo 2, which can also be viewed as a quantum XOR gate implemented as a Controlled NOT gate), if zero, then \n\n\n\nf\n\n\n{\\displaystyle f}\n\n is constant, otherwise \n\n\n\nf\n\n\n{\\displaystyle f}\n\n is not constant.\nWe begin with the two-qubit state \n\n\n\n\n|\n\n0\n\u27e9\n\n|\n\n1\n\u27e9\n\n\n{\\displaystyle |0\\rangle |1\\rangle }\n\n and apply a Hadamard transform to each qubit. This yields\nWe are given a quantum implementation of the function \n\n\n\nf\n\n\n{\\displaystyle f}\n\n that maps \n\n\n\n\n|\n\nx\n\u27e9\n\n|\n\ny\n\u27e9\n\n\n{\\displaystyle |x\\rangle |y\\rangle }\n\n to \n\n\n\n\n|\n\nx\n\u27e9\n\n|\n\nf\n(\nx\n)\n\u2295\ny\n\u27e9\n\n\n{\\displaystyle |x\\rangle |f(x)\\oplus y\\rangle }\n\n. Applying this function to our current state we obtain\nWe ignore the last bit and the global phase and therefore have the state\nApplying a Hadamard transform to this state we have\nObviously \n\n\n\nf\n(\n0\n)\n\u2295\nf\n(\n1\n)\n=\n0\n\n\n{\\displaystyle f(0)\\oplus f(1)=0}\n\n if and only if we measure a zero and \n\n\n\nf\n(\n0\n)\n\u2295\nf\n(\n1\n)\n=\n1\n\n\n{\\displaystyle f(0)\\oplus f(1)=1}\n\n if and only if we measure a one. So with certainty we know whether \n\n\n\nf\n(\nx\n)\n\n\n{\\displaystyle f(x)}\n\n is constant or balanced.", 
    "dbpedia_url": "http://dbpedia.org/resource/Deutsch\u2013Jozsa_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Deutsch\u2013Jozsa_algorithm\n"
}