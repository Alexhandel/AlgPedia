{
    "about": "In computer science, the Floyd\u2013Warshall algorithm is an algorithm for finding shortest paths in a weighted graph with positive or negative edge weights (but with no negative cycles).[1][2] A single execution of the algorithm will find the lengths (summed weights) of the shortest paths between all pairs of vertices. Although it does not return details of the paths themselves, it is possible to reconstruct the paths with simple modifications to the algorithm. Versions of the algorithm can also be used for finding the transitive closure of a relation \n\n\n\nR\n\n\n{\\displaystyle R}\n\n, or (in connection with the Schulze voting system) widest paths between all pairs of vertices in a weighted graph.", 
    "name": "Floyd\u2013Warshall Algorithm", 
    "classification": "Graph Algorithms", 
    "full_text": "In computer science, the Floyd\u2013Warshall algorithm is an algorithm for finding shortest paths in a weighted graph with positive or negative edge weights (but with no negative cycles).[1][2] A single execution of the algorithm will find the lengths (summed weights) of the shortest paths between all pairs of vertices. Although it does not return details of the paths themselves, it is possible to reconstruct the paths with simple modifications to the algorithm. Versions of the algorithm can also be used for finding the transitive closure of a relation \n\n\n\nR\n\n\n{\\displaystyle R}\n\n, or (in connection with the Schulze voting system) widest paths between all pairs of vertices in a weighted graph.\n\n\nThe Floyd\u2013Warshall algorithm is an example of dynamic programming, and was published in its currently recognized form by Robert Floyd in 1962.[3] However, it is essentially the same as algorithms previously published by Bernard Roy in 1959[4] and also by Stephen Warshall in 1962[5] for finding the transitive closure of a graph,[6] and is closely related to Kleene's algorithm (published in 1956) for converting a deterministic finite automaton into a regular expression.[7] The modern formulation of the algorithm as three nested for-loops was first described by Peter Ingerman, also in 1962.[8]\nThe algorithm is also known as Floyd's algorithm, the Roy\u2013Warshall algorithm, the Roy\u2013Floyd algorithm, or the WFI algorithm.\nThe Floyd\u2013Warshall algorithm compares all possible paths through the graph between each pair of vertices. It is able to do this with \n\n\n\n\u0398\n(\n\n|\n\nV\n\n\n|\n\n\n3\n\n\n)\n\n\n{\\displaystyle \\Theta (|V|^{3})}\n\n comparisons in a graph. This is remarkable considering that there may be up to \n\n\n\n\u03a9\n(\n\n|\n\nV\n\n\n|\n\n\n2\n\n\n)\n\n\n{\\displaystyle \\Omega (|V|^{2})}\n\n edges in the graph, and every combination of edges is tested. It does so by incrementally improving an estimate on the shortest path between two vertices, until the estimate is optimal.\nConsider a graph \n\n\n\nG\n\n\n{\\displaystyle G}\n\n with vertices \n\n\n\nV\n\n\n{\\displaystyle V}\n\n numbered 1 through\u00a0\n\n\n\nN\n\n\n{\\displaystyle N}\n\n. Further consider a function \n\n\n\n\ns\nh\no\nr\nt\ne\ns\nt\nP\na\nt\nh\n\n(\ni\n,\nj\n,\nk\n)\n\n\n{\\displaystyle \\mathrm {shortestPath} (i,j,k)}\n\n that returns the shortest possible path from \n\n\n\ni\n\n\n{\\displaystyle i}\n\n to \n\n\n\nj\n\n\n{\\displaystyle j}\n\n using vertices only from the set \n\n\n\n{\n1\n,\n2\n,\n\u2026\n,\nk\n}\n\n\n{\\displaystyle \\{1,2,\\ldots ,k\\}}\n\n as intermediate points along the way. Now, given this function, our goal is to find the shortest path from each \n\n\n\ni\n\n\n{\\displaystyle i}\n\n to each \n\n\n\nj\n\n\n{\\displaystyle j}\n\n using only vertices in \n\n\n\n{\n1\n,\n2\n,\n\u2026\n,\nk\n+\n1\n}\n\n\n{\\displaystyle \\{1,2,\\ldots ,k+1\\}}\n\n.\nFor each of these pairs of vertices, the true shortest path could be either\nor\nWe know that the best path from \n\n\n\ni\n\n\n{\\displaystyle i}\n\n to \n\n\n\nj\n\n\n{\\displaystyle j}\n\n that only uses vertices 1 through \n\n\n\nk\n\n\n{\\displaystyle k}\n\n is defined by \n\n\n\n\ns\nh\no\nr\nt\ne\ns\nt\nP\na\nt\nh\n\n(\ni\n,\nj\n,\nk\n)\n\n\n{\\displaystyle \\mathrm {shortestPath} (i,j,k)}\n\n, and it is clear that if there were a better path from \n\n\n\ni\n\n\n{\\displaystyle i}\n\n to \n\n\n\nk\n+\n1\n\n\n{\\displaystyle k+1}\n\n to \n\n\n\nj\n\n\n{\\displaystyle j}\n\n, then the length of this path would be the concatenation of the shortest path from \n\n\n\ni\n\n\n{\\displaystyle i}\n\n to \n\n\n\nk\n+\n1\n\n\n{\\displaystyle k+1}\n\n (using vertices in \n\n\n\n{\n1\n,\n\u2026\n,\nk\n}\n\n\n{\\displaystyle \\{1,\\ldots ,k\\}}\n\n) and the shortest path from \n\n\n\n{\nk\n+\n1\n}\n\n\n{\\displaystyle \\{k+1\\}}\n\n to \n\n\n\nj\n\n\n{\\displaystyle j}\n\n (also using vertices in\u00a0\n\n\n\n{\n1\n,\n\u2026\n,\nk\n}\n\n\n{\\displaystyle \\{1,\\ldots ,k\\}}\n\n).\nIf \n\n\n\nw\n(\ni\n,\nj\n)\n\n\n{\\displaystyle w(i,j)}\n\n is the weight of the edge between vertices \n\n\n\ni\n\n\n{\\displaystyle i}\n\n and \n\n\n\nj\n\n\n{\\displaystyle j}\n\n, we can define \n\n\n\n\ns\nh\no\nr\nt\ne\ns\nt\nP\na\nt\nh\n\n(\ni\n,\nj\n,\nk\n+\n1\n)\n\n\n{\\displaystyle \\mathrm {shortestPath} (i,j,k+1)}\n\n in terms of the following recursive formula: the base case is\nand the recursive case is\nThis formula is the heart of the Floyd\u2013Warshall algorithm. The algorithm works by first computing \n\n\n\n\ns\nh\no\nr\nt\ne\ns\nt\nP\na\nt\nh\n\n(\ni\n,\nj\n,\nk\n)\n\n\n{\\displaystyle \\mathrm {shortestPath} (i,j,k)}\n\n for all \n\n\n\n(\ni\n,\nj\n)\n\n\n{\\displaystyle (i,j)}\n\n pairs for \n\n\n\nk\n=\n1\n\n\n{\\displaystyle k=1}\n\n, then \n\n\n\nk\n=\n2\n\n\n{\\displaystyle k=2}\n\n, etc. This process continues until \n\n\n\nk\n=\nN\n\n\n{\\displaystyle k=N}\n\n, and we have found the shortest path for all \n\n\n\n(\ni\n,\nj\n)\n\n\n{\\displaystyle (i,j)}\n\n pairs using any intermediate vertices. Pseudocode for this basic version follows:\nThe algorithm above is executed on the graph on the left below:\n\nPrior to the first iteration of the outer loop, labeled \n\n\n\nk\n=\n0\n\n\n{\\displaystyle k=0}\n\n above, the only known paths correspond to the single edges in the graph. At \n\n\n\nk\n=\n1\n\n\n{\\displaystyle k=1}\n\n, paths that go through the vertex 1 are found: in particular, the path [2,1,3] is found, replacing the path [2,3] which has fewer edges but is longer (in terms of weight). At \n\n\n\nk\n=\n2\n\n\n{\\displaystyle k=2}\n\n, paths going through the vertices {1,2} are found. The red and blue boxes show how the path [4,2,1,3] is assembled from the two known paths [4,2] and [2,1,3] encountered in previous iterations, with 2 in the intersection. The path [4,2,3] is not considered, because [2,1,3] is the shortest path encountered so far from 2 to 3. At \n\n\n\nk\n=\n3\n\n\n{\\displaystyle k=3}\n\n, paths going through the vertices {1,2,3} are found. Finally, at \n\n\n\nk\n=\n4\n\n\n{\\displaystyle k=4}\n\n, all shortest paths are found.\nA negative cycle is a cycle whose edges sum to a negative value. There is no shortest path between any pair of vertices \n\n\n\ni\n\n\n{\\displaystyle i}\n\n, \n\n\n\nj\n\n\n{\\displaystyle j}\n\n which form part of a negative cycle, because path-lengths from \n\n\n\ni\n\n\n{\\displaystyle i}\n\n to \n\n\n\nj\n\n\n{\\displaystyle j}\n\n can be arbitrarily small (negative). For numerically meaningful output, the Floyd\u2013Warshall algorithm assumes that there are no negative cycles. Nevertheless, if there are negative cycles, the Floyd\u2013Warshall algorithm can be used to detect them. The intuition is as follows:\nHence, to detect negative cycles using the Floyd\u2013Warshall algorithm, one can inspect the diagonal of the path matrix, and the presence of a negative number indicates that the graph contains at least one negative cycle.[9] To avoid numerical problems one should check for negative numbers on the diagonal of the path matrix within the inner for loop of the algorithm.[10] Obviously, in an undirected graph a negative edge creates a negative cycle (i.e., a closed walk) involving its incident vertices. Considering all edges of the above example graph as undirected, e.g. the vertex sequence 4 \u2013 2 \u2013 4 is a cycle with weight sum \u22122.\nThe Floyd\u2013Warshall algorithm typically only provides the lengths of the paths between all pairs of vertices. With simple modifications, it is possible to create a method to reconstruct the actual path between any two endpoint vertices. While one may be inclined to store the actual path from each vertex to each other vertex, this is not necessary, and in fact, is very costly in terms of memory. Instead, the Shortest-path tree can be calculated for each node in \n\n\n\n\u0398\n(\n\n|\n\nE\n\n|\n\n)\n\n\n{\\displaystyle \\Theta (|E|)}\n\n time using \n\n\n\n\u0398\n(\n\n|\n\nV\n\n|\n\n)\n\n\n{\\displaystyle \\Theta (|V|)}\n\n memory to store each tree which allows us to efficiently reconstruct a path from any two connected vertices.\nLet \n\n\n\nn\n\n\n{\\displaystyle n}\n\n be \n\n\n\n\n|\n\nV\n\n|\n\n\n\n{\\displaystyle |V|}\n\n, the number of vertices. To find all \n\n\n\n\nn\n\n2\n\n\n\n\n{\\displaystyle n^{2}}\n\n of \n\n\n\n\ns\nh\no\nr\nt\ne\ns\nt\nP\na\nt\nh\n\n(\ni\n,\nj\n,\nk\n)\n\n\n{\\displaystyle \\mathrm {shortestPath} (i,j,k)}\n\n (for all \n\n\n\ni\n\n\n{\\displaystyle i}\n\n and \n\n\n\nj\n\n\n{\\displaystyle j}\n\n) from those of \n\n\n\n\ns\nh\no\nr\nt\ne\ns\nt\nP\na\nt\nh\n\n(\ni\n,\nj\n,\nk\n\u2212\n1\n)\n\n\n{\\displaystyle \\mathrm {shortestPath} (i,j,k-1)}\n\n requires \n\n\n\n2\n\nn\n\n2\n\n\n\n\n{\\displaystyle 2n^{2}}\n\n operations. Since we begin with \n\n\n\n\ns\nh\no\nr\nt\ne\ns\nt\nP\na\nt\nh\n\n(\ni\n,\nj\n,\n0\n)\n=\n\ne\nd\ng\ne\nC\no\ns\nt\n\n(\ni\n,\nj\n)\n\n\n{\\displaystyle \\mathrm {shortestPath} (i,j,0)=\\mathrm {edgeCost} (i,j)}\n\n and compute the sequence of \n\n\n\nn\n\n\n{\\displaystyle n}\n\n matrices \n\n\n\n\ns\nh\no\nr\nt\ne\ns\nt\nP\na\nt\nh\n\n(\ni\n,\nj\n,\n1\n)\n\n\n{\\displaystyle \\mathrm {shortestPath} (i,j,1)}\n\n, \n\n\n\n\ns\nh\no\nr\nt\ne\ns\nt\nP\na\nt\nh\n\n(\ni\n,\nj\n,\n2\n)\n\n\n{\\displaystyle \\mathrm {shortestPath} (i,j,2)}\n\n, \n\n\n\n\u2026\n\n\n{\\displaystyle \\ldots }\n\n, \n\n\n\n\ns\nh\no\nr\nt\ne\ns\nt\nP\na\nt\nh\n\n(\ni\n,\nj\n,\nn\n)\n\n\n{\\displaystyle \\mathrm {shortestPath} (i,j,n)}\n\n, the total number of operations used is \n\n\n\nn\n\u22c5\n2\n\nn\n\n2\n\n\n=\n2\n\nn\n\n3\n\n\n\n\n{\\displaystyle n\\cdot 2n^{2}=2n^{3}}\n\n. Therefore, the complexity of the algorithm is \n\n\n\n\u0398\n(\n\nn\n\n3\n\n\n)\n\n\n{\\displaystyle \\Theta (n^{3})}\n\n.\nThe Floyd\u2013Warshall algorithm can be used to solve the following problems, among others:\nImplementations are available for many programming languages.\nThe Floyd\u2013Warshall algorithm is a good choice for computing paths between all pairs of vertices in dense graphs, in which most or all pairs of vertices are connected by edges. For sparse graphs with non-negative edge weights, a better choice is to use Dijkstra's algorithm from each possible starting vertex, since the running time of repeated Dijkstra (\n\n\n\nO\n(\n\n|\n\nV\n\n|\n\n\u22c5\n\n|\n\nE\n\n|\n\nlog\n\u2061\n\n|\n\nV\n\n|\n\n)\n\n\n{\\displaystyle O(|V|\\cdot |E|\\log |V|)}\n\n using binary heaps) is better than the \n\n\n\nO\n(\n\n|\n\nV\n\n\n|\n\n\n3\n\n\n)\n\n\n{\\displaystyle O(|V|^{3})}\n\n running time of the Floyd\u2013Warshall algorithm when \n\n\n\n\n|\n\nE\n\n|\n\n\n\n{\\displaystyle |E|}\n\n is significantly smaller than \n\n\n\n\n|\n\nV\n\n\n|\n\n\n2\n\n\n\n\n{\\displaystyle |V|^{2}}\n\n. For sparse graphs with negative edges but no negative cycles, Johnson's algorithm can be used, with the same asymptotic running time as the repeated Dijkstra approach.\nThere are also known algorithms using fast matrix multiplication to speed up all-pairs shortest path computation in dense graphs, but these typically make extra assumptions on the edge weights (such as requiring them to be small integers).[13][14] In addition, because of the high constant factors in their running time, they would only provide a speedup over the Floyd\u2013Warshall algorithm for very large graphs.", 
    "dbpedia_url": "http://dbpedia.org/resource/Floyd\u2013Warshall_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Floyd\u2013Warshall_algorithm\n"
}