ABOUT
The Ford–Fulkerson method or Ford–Fulkerson algorithm (FFA) is a greedy algorithm that computes the maximum flow in a flow network. It is called a "method" instead of an "algorithm" as the approach to finding augmenting paths in a residual graph is not fully specified[1] or it is specified in several implementations with different running times.[2] It was published in 1956 by L. R. Ford, Jr. and D. R. Fulkerson.[3] The name "Ford–Fulkerson" is often also used for the Edmonds–Karp algorithm, which is a specialization of Ford–Fulkerson.
FULL TEXT
The Ford–Fulkerson method or Ford–Fulkerson algorithm (FFA) is a greedy algorithm that computes the maximum flow in a flow network. It is called a "method" instead of an "algorithm" as the approach to finding augmenting paths in a residual graph is not fully specified[1] or it is specified in several implementations with different running times.[2] It was published in 1956 by L. R. Ford, Jr. and D. R. Fulkerson.[3] The name "Ford–Fulkerson" is often also used for the Edmonds–Karp algorithm, which is a specialization of Ford–Fulkerson.
The idea behind the algorithm is as follows: as long as there is a path from the source (start node) to the sink (end node), with available capacity on all edges in the path, we send flow along one of the paths. Then we find another path, and so on. A path with available capacity is called an augmenting path.


Let 



G
(
V
,
E
)


{\displaystyle G(V,E)}

 be a graph, and for each edge from 



u


{\displaystyle u}

 to 



v


{\displaystyle v}

, let 



c
(
u
,
v
)


{\displaystyle c(u,v)}

 be the capacity and 



f
(
u
,
v
)


{\displaystyle f(u,v)}

 be the flow. We want to find the maximum flow from the source 



s


{\displaystyle s}

 to the sink 



t


{\displaystyle t}

. After every step in the algorithm the following is maintained:
This means that the flow through the network is a legal flow after each round in the algorithm. We define the residual network 




G

f


(
V
,

E

f


)


{\displaystyle G_{f}(V,E_{f})}

 to be the network with capacity 




c

f


(
u
,
v
)
=
c
(
u
,
v
)
−
f
(
u
,
v
)


{\displaystyle c_{f}(u,v)=c(u,v)-f(u,v)}

 and no flow. Notice that it can happen that a flow from 



v


{\displaystyle v}

 to 



u


{\displaystyle u}

 is allowed in the residual network, though disallowed in the original network: if 



f
(
u
,
v
)
>
0


{\displaystyle f(u,v)>0}

 and 



c
(
v
,
u
)
=
0


{\displaystyle c(v,u)=0}

 then 




c

f


(
v
,
u
)
=
c
(
v
,
u
)
−
f
(
v
,
u
)
=
f
(
u
,
v
)
>
0


{\displaystyle c_{f}(v,u)=c(v,u)-f(v,u)=f(u,v)>0}

.
Algorithm Ford–Fulkerson
The path in step 2 can be found with for example a breadth-first search or a depth-first search in 




G

f


(
V
,

E

f


)


{\displaystyle G_{f}(V,E_{f})}

. If you use the former, the algorithm is called Edmonds–Karp.
When no more paths in step 2 can be found, 



s


{\displaystyle s}

 will not be able to reach 



t


{\displaystyle t}

 in the residual network. If 



S


{\displaystyle S}

 is the set of nodes reachable by 



s


{\displaystyle s}

 in the residual network, then the total capacity in the original network of edges from 



S


{\displaystyle S}

 to the remainder of 



V


{\displaystyle V}

 is on the one hand equal to the total flow we found from 



s


{\displaystyle s}

 to 



t


{\displaystyle t}

, and on the other hand serves as an upper bound for all such flows. This proves that the flow we found is maximal. See also Max-flow Min-cut theorem.
If the graph 



G
(
V
,
E
)


{\displaystyle G(V,E)}

 has multiple sources and sinks, we act as follows: Suppose that 



T
=
{
t

|

t

 is a sink

}


{\displaystyle T=\{t|t{\text{ is a sink}}\}}

 and 



S
=
{
s

|

s

 is a source

}


{\displaystyle S=\{s|s{\text{ is a source}}\}}

. Add a new source 




s

∗




{\displaystyle s^{*}}

 with an edge 



(

s

∗


,
s
)


{\displaystyle (s^{*},s)}

 from 




s

∗




{\displaystyle s^{*}}

 to every node 



s
∈
S


{\displaystyle s\in S}

, with capacity 



c
(

s

∗


,
s
)
=

d

s



(

d

s


=

∑

(
s
,
u
)
∈
E


c
(
s
,
u
)
)


{\displaystyle c(s^{*},s)=d_{s}\;(d_{s}=\sum _{(s,u)\in E}c(s,u))}

. And add a new sink 




t

∗




{\displaystyle t^{*}}

 with an edge 



(
t
,

t

∗


)


{\displaystyle (t,t^{*})}

 from every node 



t
∈
T


{\displaystyle t\in T}

 to 




t

∗




{\displaystyle t^{*}}

, with capacity 



c
(
t
,

t

∗


)
=

d

t



(

d

t


=

∑

(
v
,
t
)
∈
E


c
(
v
,
t
)
)


{\displaystyle c(t,t^{*})=d_{t}\;(d_{t}=\sum _{(v,t)\in E}c(v,t))}

. Then apply the Ford–Fulkerson algorithm.
Also, if a node 



u


{\displaystyle u}

 has capacity constraint 




d

u




{\displaystyle d_{u}}

, we replace this node with two nodes 




u

i
n


,

u

o
u
t




{\displaystyle u_{in},u_{out}}

, and an edge 



(

u

i
n


,

u

o
u
t


)


{\displaystyle (u_{in},u_{out})}

, with capacity 



c
(

u

i
n


,

u

o
u
t


)
=

d

u




{\displaystyle c(u_{in},u_{out})=d_{u}}

. Then apply the Ford–Fulkerson algorithm.
By adding the flow augmenting path to the flow already established in the graph, the maximum flow will be reached when no more flow augmenting paths can be found in the graph. However, there is no certainty that this situation will ever be reached, so the best that can be guaranteed is that the answer will be correct if the algorithm terminates. In the case that the algorithm runs forever, the flow might not even converge towards the maximum flow. However, this situation only occurs with irrational flow values. When the capacities are integers, the runtime of Ford–Fulkerson is bounded by 



O
(
E
f
)


{\displaystyle O(Ef)}

 (see big O notation), where 



E


{\displaystyle E}

 is the number of edges in the graph and 



f


{\displaystyle f}

 is the maximum flow in the graph. This is because each augmenting path can be found in 



O
(
E
)


{\displaystyle O(E)}

 time and increases the flow by an integer amount of at least 



1


{\displaystyle 1}

.
A variation of the Ford–Fulkerson algorithm with guaranteed termination and a runtime independent of the maximum flow value is the Edmonds–Karp algorithm, which runs in 



O
(
V

E

2


)


{\displaystyle O(VE^{2})}

 time.
The following example shows the first steps of Ford–Fulkerson in a flow network with 4 nodes, source 



A


{\displaystyle A}

 and sink 



D


{\displaystyle D}

. This example shows the worst-case behaviour of the algorithm. In each step, only a flow of 



1


{\displaystyle 1}

 is sent across the network. If breadth-first-search were used instead, only two steps would be needed.
Notice how flow is "pushed back" from 



C


{\displaystyle C}

 to 



B


{\displaystyle B}

 when finding the path 



A
,
C
,
B
,
D


{\displaystyle A,C,B,D}

.
Consider the flow network shown on the right, with source 



s


{\displaystyle s}

, sink 



t


{\displaystyle t}

, capacities of edges 




e

1




{\displaystyle e_{1}}

, 




e

2




{\displaystyle e_{2}}

 and 




e

3




{\displaystyle e_{3}}

 respectively 



1


{\displaystyle 1}

, 



r
=
(


5


−
1
)

/

2


{\displaystyle r=({\sqrt {5}}-1)/2}

 and 



1


{\displaystyle 1}

 and the capacity of all other edges some integer 



M
≥
2


{\displaystyle M\geq 2}

. The constant 



r


{\displaystyle r}

 was chosen so, that 




r

2


=
1
−
r


{\displaystyle r^{2}=1-r}

. We use augmenting paths according to the following table, where 




p

1


=
{
s
,

v

4


,

v

3


,

v

2


,

v

1


,
t
}


{\displaystyle p_{1}=\{s,v_{4},v_{3},v_{2},v_{1},t\}}

, 




p

2


=
{
s
,

v

2


,

v

3


,

v

4


,
t
}


{\displaystyle p_{2}=\{s,v_{2},v_{3},v_{4},t\}}

 and 




p

3


=
{
s
,

v

1


,

v

2


,

v

3


,
t
}


{\displaystyle p_{3}=\{s,v_{1},v_{2},v_{3},t\}}

.
Note that after step 1 as well as after step 5, the residual capacities of edges 




e

1




{\displaystyle e_{1}}

, 




e

2




{\displaystyle e_{2}}

 and 




e

3




{\displaystyle e_{3}}

 are in the form 




r

n




{\displaystyle r^{n}}

, 




r

n
+
1




{\displaystyle r^{n+1}}

 and 



0


{\displaystyle 0}

, respectively, for some 



n
∈

N



{\displaystyle n\in \mathbb {N} }

. This means that we can use augmenting paths 




p

1




{\displaystyle p_{1}}

, 




p

2




{\displaystyle p_{2}}

, 




p

1




{\displaystyle p_{1}}

 and 




p

3




{\displaystyle p_{3}}

 infinitely many times and residual capacities of these edges will always be in the same form. Total flow in the network after step 5 is 



1
+
2
(

r

1


+

r

2


)


{\displaystyle 1+2(r^{1}+r^{2})}

. If we continue to use augmenting paths as above, the total flow converges to 




1
+
2

∑

i
=
1


∞



r

i


=
3
+
2
r



{\displaystyle \textstyle 1+2\sum _{i=1}^{\infty }r^{i}=3+2r}

, while the maximum flow is 



2
M
+
1


{\displaystyle 2M+1}

. In this case, the algorithm never terminates and the flow doesn't even converge to the maximum flow.[4]
For the example flow network in maximum flow problem we do the following:
 Media related to Ford–Fulkerson algorithm at Wikimedia Commons