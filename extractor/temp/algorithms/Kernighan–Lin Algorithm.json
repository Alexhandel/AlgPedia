{
    "about": "The Kernighan\u2013Lin algorithm is a heuristic algorithm for finding partitions of graphs. The algorithm has important applications in the layout of digital circuits and components in VLSI.[1][2]", 
    "name": "Kernighan\u2013Lin Algorithm", 
    "classification": "Heuristic Algorithms", 
    "full_text": "The Kernighan\u2013Lin algorithm is a heuristic algorithm for finding partitions of graphs. The algorithm has important applications in the layout of digital circuits and components in VLSI.[1][2]\nThe input to the algorithm is an undirected graph G = (V,E) with vertex set V, edge set E, and (optionally) numerical weights on the edges in E. The goal of the algorithm is to partition V into two disjoint subsets A and B of equal (or nearly equal) size, in a way that minimizes the sum T of the weights of the subset of edges that cross from A to B. If the graph is unweighted, then instead the goal is to minimize the number of crossing edges; this is equivalent to assigning weight one to each edge. The algorithm maintains and improves a partition, in each pass using a greedy algorithm to pair up vertices of A with vertices of B, so that moving the paired vertices from one side of the partition to the other will improve the partition. After matching the vertices, it then performs a subset of the pairs chosen to have the best overall effect on the solution quality T. Given a graph with n vertices, each pass of the algorithm runs in time O(n2 log n).\nIn more detail, let \n\n\n\n\nI\n\na\n\n\n\n\n{\\displaystyle I_{a}}\n\n be the internal cost of a, that is, the sum of the costs of edges between a and other nodes in A, and let \n\n\n\n\nE\n\na\n\n\n\n\n{\\displaystyle E_{a}}\n\n be the external cost of a, that is, the sum of the costs of edges between a and nodes in B. Furthermore, let\nbe the difference between the external and internal costs of a. If a and b are interchanged, then the reduction in cost is\nwhere \n\n\n\n\nc\n\na\n,\nb\n\n\n\n\n{\\displaystyle c_{a,b}}\n\n is the cost of the possible edge between a and b.\nThe algorithm attempts to find an optimal series of interchange operations between elements of \n\n\n\nA\n\n\n{\\displaystyle A}\n\n and \n\n\n\nB\n\n\n{\\displaystyle B}\n\n which maximizes \n\n\n\n\nT\n\no\nl\nd\n\n\n\u2212\n\nT\n\nn\ne\nw\n\n\n\n\n{\\displaystyle T_{old}-T_{new}}\n\n and then executes the operations, producing a partition of the graph to A and B.[1]\nSee [2]", 
    "dbpedia_url": "http://dbpedia.org/resource/Kernighan\u2013Lin_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Kernighan\u2013Lin_algorithm\n"
}