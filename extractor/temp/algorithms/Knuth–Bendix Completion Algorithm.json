{
    "about": "The Knuth\u2013Bendix completion algorithm (named after Donald Knuth and Peter Bendix[1]) is a semi-decision[2][3] algorithm for transforming a set of equations (over terms) into a confluent term rewriting system. When the algorithm succeeds, it effectively solves the word problem for the specified algebra.", 
    "name": "Knuth\u2013Bendix Completion Algorithm", 
    "classification": "Computational Group Theory", 
    "full_text": "The Knuth\u2013Bendix completion algorithm (named after Donald Knuth and Peter Bendix[1]) is a semi-decision[2][3] algorithm for transforming a set of equations (over terms) into a confluent term rewriting system. When the algorithm succeeds, it effectively solves the word problem for the specified algebra.\nBuchberger's algorithm for computing Gr\u00f6bner bases is a very similar algorithm. Although developed independently, it may also be seen as the instantiation of Knuth\u2013Bendix algorithm in the theory of polynomial rings.\n\n\nFor a set E of equations, its deductive closure (\u204e\u27f7E) is the set of all equations that can be derived by applying equations from E in any order. Formally, E is considered a binary relation, (\u27f6E) is its rewrite closure, and (\u204e\u27f7E) is the equivalence closure of (\u27f6E). For a set R of rewrite rules, its deductive closure (\u204e\u27f6E \u2218 \u204e\u27f5E) is the set of all equations than can be confirmed by applying rules from R left-to-right to both sides until they are literally equal. Formally, R is again viewed as binary relation, (\u27f6R) is its rewrite closure, (\u27f5R) is its converse, and (\u204e\u27f6E \u2218 \u204e\u27f5E) is the relation composition of their reflexive transitive closures (\u204e\u27f6E and \u204e\u27f5E).\nFor example, if E = {1\u22c5x = x, x\u22121\u22c5x = 1, (x\u22c5y)\u22c5z = x\u22c5(y\u22c5z)} are the group axioms, the derivation chain\ndemonstrates that a\u22121\u22c5(a\u22c5b) \u204e\u27f7E b is a member of E's deductive closure. If R = { 1\u22c5x \u2192 x, x\u22121\u22c5x \u2192 1, (x\u22c5y)\u22c5z \u2192 x\u22c5(y\u22c5z) } is a \"rewrite rule\" version of E, the derivation chains\ndemonstrate that (a\u22121\u22c5a)\u22c5b \u204e\u27f6E\u2218\u204e\u27f5E b\u22c51 is a member of R's deductive closure. However, there is no way to derive a\u22121\u22c5(a\u22c5b) \u204e\u27f6E\u2218\u204e\u27f5E b similar to above, since a right-to-left application of the rule (x\u22c5y)\u22c5z \u2192 x\u22c5(y\u22c5z) is not allowed.\nThe Knuth\u2013Bendix algorithm takes a set E of equations between terms, and a reduction ordering (>) on the set of all terms, and attempts to construct a confluent and terminating term rewriting system R that has the same deductive closure as E. While proving consequences from E often requires human intuition, proving consequences from R does not. For more details, see Confluence (abstract rewriting)#Motivating examples, which gives an example proof from group theory, performed both using E and using R.\nGiven a set E of equations between terms, the following inference rules can be used to transform it into an equivalent convergent term rewrite system (if possible):[4][5] They are based on a user-given reduction ordering (>) on the set of all terms; it is lifted to a well-founded ordering (\u25bb) on the set of rewrite rules by defining (s \u2192 t) \u25bb (l \u2192 r) if\nThe following example run, obtained from the E theorem prover, computes a completion of the (additive) group axioms as in Knuth, Bendix (1970). It starts with the three initial equations for the group (neutral element 0, inverse elements, associativity), using f(X,Y) for X+Y, and i(X) for \u2212X. The 10 equations marked with \"final\" represent the resulting convergent rewrite system. \"pm\" is short for \"paramodulation\", implementing deduce. Critical pair computation is an instance of paramodulation for equational unit clauses. \"rw\" is rewriting, implementing compose, collapse, and simplify. Orienting of equations is done implicitly and not recorded.\nSee also Word problem (mathematics) for another presentation of this example.\nAn important case in computational group theory are string rewriting systems which can be used to give canonical labels to elements or cosets of a finitely presented group as products of the generators. This special case is the focus of this section.\nThe critical pair lemma states that a term rewriting system is locally confluent (or weakly confluent) if and only if all its critical pairs are convergent. Furthermore, we have Newman's lemma which states that if an (abstract) rewriting system is strongly normalizing and weakly confluent, then the rewriting system is confluent. So, if we can add rules to the term rewriting system in order to force all critical pairs to be convergent while maintaining the strong normalizing property, then this will force the resultant rewriting system to be confluent.\nConsider a finitely presented monoid \n\n\n\nM\n=\n\u27e8\nX\n\u2223\nR\n\u27e9\n\n\n{\\displaystyle M=\\langle X\\mid R\\rangle }\n\n where X is a finite set of generators and R is a set of defining relations on X. Let X* be the set of all words in X (i.e. the free monoid generated by X). Since the relations R generate an equivalence relation on X*, one can consider elements of M to be the equivalence classes of X* under R. For each class {w1, w2, ... } it is desirable to choose a standard representative wk. This representative is called the canonical or normal form for each word wk in the class. If there is a computable method to determine for each wk its normal form wi then the word problem is easily solved. A confluent rewriting system allows one to do precisely this.\nAlthough the choice of a canonical form can theoretically be made in an arbitrary fashion this approach is generally not computable. (Consider that an equivalence relation on a language can produce an infinite number of infinite classes.) If the language is well-ordered then the order < gives a consistent method for defining minimal representatives, however computing these representatives may still not be possible. In particular, if a rewriting system is used to calculate minimal representatives then the order < should also have the property:\nThis property is called translation invariance. An order that is both translation-invariant and a well-order is called a reduction order.\nFrom the presentation of the monoid it is possible to define a rewriting system given by the relations R. If A x B is in R then either A\u00a0<\u00a0B in which case B\u00a0\u2192\u00a0A is a rule in the rewriting system, otherwise A\u00a0>\u00a0B and A\u00a0\u2192\u00a0B. Since < is a reduction order a given word W can be reduced W > W_1 > ... > W_n where W_n is irreducible under the rewriting system. However, depending on the rules that are applied at each Wi\u00a0\u2192\u00a0Wi+1 it is possible to end up with two different irreducible reductions Wn\u00a0\u2260\u00a0W'm of W. However, if the rewriting system given by the relations is converted to a confluent rewriting system via the Knuth\u2013Bendix algorithm, then all reductions are guaranteed to produce the same irreducible word, namely the normal form for that word.\nSuppose we are given a presentation \n\n\n\n\u27e8\nX\n\u2223\nR\n\u27e9\n\n\n{\\displaystyle \\langle X\\mid R\\rangle }\n\n, where \n\n\n\nX\n\n\n{\\displaystyle X}\n\n is a set of generators and \n\n\n\nR\n\n\n{\\displaystyle R}\n\n is a set of relations giving the rewriting system. Suppose further that we have a reduction ordering \n\n\n\n<\n\n\n{\\displaystyle <}\n\n among the words generated by \n\n\n\nX\n\n\n{\\displaystyle X}\n\n(e.g., shortlex order). For each relation \n\n\n\n\nP\n\ni\n\n\n=\n\nQ\n\ni\n\n\n\n\n{\\displaystyle P_{i}=Q_{i}}\n\n in \n\n\n\nR\n\n\n{\\displaystyle R}\n\n, suppose \n\n\n\n\nQ\n\ni\n\n\n<\n\nP\n\ni\n\n\n\n\n{\\displaystyle Q_{i}<P_{i}}\n\n. Thus we begin with the set of reductions \n\n\n\n\nP\n\ni\n\n\n\u2192\n\nQ\n\ni\n\n\n\n\n{\\displaystyle P_{i}\\rightarrow Q_{i}}\n\n.\nFirst, if any relation \n\n\n\n\nP\n\ni\n\n\n=\n\nQ\n\ni\n\n\n\n\n{\\displaystyle P_{i}=Q_{i}}\n\n can be reduced, replace \n\n\n\n\nP\n\ni\n\n\n\n\n{\\displaystyle P_{i}}\n\n and \n\n\n\n\nQ\n\ni\n\n\n\n\n{\\displaystyle Q_{i}}\n\n with the reductions.\nNext, we add more reductions (that is, rewriting rules) to eliminate possible exceptions of confluence. Suppose that \n\n\n\n\nP\n\ni\n\n\n\n\n{\\displaystyle P_{i}}\n\n and \n\n\n\n\nP\n\nj\n\n\n\n\n{\\displaystyle P_{j}}\n\n, where \n\n\n\ni\n\u2260\nj\n\n\n{\\displaystyle i\\neq j}\n\n, overlap.\nReduce the word \n\n\n\nA\nB\nC\n\n\n{\\displaystyle ABC}\n\n using \n\n\n\n\nP\n\ni\n\n\n\n\n{\\displaystyle P_{i}}\n\n first, then using \n\n\n\n\nP\n\nj\n\n\n\n\n{\\displaystyle P_{j}}\n\n first. Call the results \n\n\n\n\nr\n\n1\n\n\n,\n\nr\n\n2\n\n\n\n\n{\\displaystyle r_{1},r_{2}}\n\n, respectively. If \n\n\n\n\nr\n\n1\n\n\n\u2260\n\nr\n\n2\n\n\n\n\n{\\displaystyle r_{1}\\neq r_{2}}\n\n, then we have an instance where confluence could fail. Hence, add the reduction \n\n\n\nmax\n\nr\n\n1\n\n\n,\n\nr\n\n2\n\n\n\u2192\nmin\n\nr\n\n1\n\n\n,\n\nr\n\n2\n\n\n\n\n{\\displaystyle \\max r_{1},r_{2}\\rightarrow \\min r_{1},r_{2}}\n\n to \n\n\n\nR\n\n\n{\\displaystyle R}\n\n.\nAfter adding a rule to \n\n\n\nR\n\n\n{\\displaystyle R}\n\n, remove any rules in \n\n\n\nR\n\n\n{\\displaystyle R}\n\n that might have reducible left sides.\nRepeat the procedure until all overlapping left sides have been checked.\nConsider the monoid:\nWe use the shortlex order. This is an infinite monoid but nevertheless, the Knuth\u2013Bendix algorithm is able to solve the word problem.\nOur beginning three reductions are therefore\n\n\n\n\n\nx\n\n3\n\n\n\u2192\n1\n\n\n{\\displaystyle x^{3}\\rightarrow 1}\n\n\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n(1)\n\n\n\n\n\ny\n\n3\n\n\n\u2192\n1\n\n\n{\\displaystyle y^{3}\\rightarrow 1}\n\n\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n(2)\n\n\n\n\n(\nx\ny\n\n)\n\n3\n\n\n\u2192\n1\n\n\n{\\displaystyle (xy)^{3}\\rightarrow 1}\n\n.\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n(3)\nConsider the word \n\n\n\n\nx\n\n3\n\n\ny\nx\ny\nx\ny\n\n\n{\\displaystyle x^{3}yxyxy}\n\n. Reducing using (1), we get \n\n\n\ny\nx\ny\nx\ny\n\n\n{\\displaystyle yxyxy}\n\n. Reducing using (3), we get \n\n\n\n\nx\n\n2\n\n\n\n\n{\\displaystyle x^{2}}\n\n. Hence, we get \n\n\n\ny\nx\ny\nx\ny\n=\n\nx\n\n2\n\n\n\n\n{\\displaystyle yxyxy=x^{2}}\n\n, giving the reduction rule\n\n\n\n\ny\nx\ny\nx\ny\n\u2192\n\nx\n\n2\n\n\n\n\n{\\displaystyle yxyxy\\rightarrow x^{2}}\n\n.\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n(4)\nSimilarly, using \n\n\n\nx\ny\nx\ny\nx\n\ny\n\n3\n\n\n\n\n{\\displaystyle xyxyxy^{3}}\n\n and reducing using (2) and (3), we get \n\n\n\nx\ny\nx\ny\nx\n=\n\ny\n\n2\n\n\n\n\n{\\displaystyle xyxyx=y^{2}}\n\n. Hence the reduction\n\n\n\n\nx\ny\nx\ny\nx\n\u2192\n\ny\n\n2\n\n\n\n\n{\\displaystyle xyxyx\\rightarrow y^{2}}\n\n.\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n(5)\nBoth of these rules obsolete (3), so we remove it.\nNext, consider \n\n\n\n\nx\n\n3\n\n\ny\nx\ny\nx\n\n\n{\\displaystyle x^{3}yxyx}\n\n by overlapping (1) and (5). Reducing we get \n\n\n\ny\nx\ny\nx\n=\n\nx\n\n2\n\n\n\ny\n\n2\n\n\n\n\n{\\displaystyle yxyx=x^{2}y^{2}}\n\n, so we add the rule\n\n\n\n\ny\nx\ny\nx\n\u2192\n\nx\n\n2\n\n\n\ny\n\n2\n\n\n\n\n{\\displaystyle yxyx\\rightarrow x^{2}y^{2}}\n\n.\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n(6)\nConsidering \n\n\n\nx\ny\nx\ny\n\nx\n\n3\n\n\n\n\n{\\displaystyle xyxyx^{3}}\n\n by overlapping (1) and (5), we get \n\n\n\nx\ny\nx\ny\n=\n\ny\n\n2\n\n\n\nx\n\n2\n\n\n\n\n{\\displaystyle xyxy=y^{2}x^{2}}\n\n, so we add the rule\n\n\n\n\n\ny\n\n2\n\n\n\nx\n\n2\n\n\n\u2192\nx\ny\nx\ny\n\n\n{\\displaystyle y^{2}x^{2}\\rightarrow xyxy}\n\n.\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n(7)\nThese obsolete rules (4) and (5), so we remove them.\nNow, we are left with the rewriting system\n\n\n\n\n\nx\n\n3\n\n\n\u2192\n1\n\n\n{\\displaystyle x^{3}\\rightarrow 1}\n\n\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n(1)\n\n\n\n\n\ny\n\n3\n\n\n\u2192\n1\n\n\n{\\displaystyle y^{3}\\rightarrow 1}\n\n\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n(2)\n\n\n\n\ny\nx\ny\nx\n\u2192\n\nx\n\n2\n\n\n\ny\n\n2\n\n\n\n\n{\\displaystyle yxyx\\rightarrow x^{2}y^{2}}\n\n\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n(6)\n\n\n\n\n\ny\n\n2\n\n\n\nx\n\n2\n\n\n\u2192\nx\ny\nx\ny\n\n\n{\\displaystyle y^{2}x^{2}\\rightarrow xyxy}\n\n.\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n(7)\nChecking the overlaps of these rules, we find no potential failures of confluence. Therefore, we have a confluent rewriting system, and the algorithm terminates successfully.\nThe order of the generators may crucially affect whether the Knuth\u2013Bendix completion terminates. As an example, consider the free Abelian group by the monoid presentation:\nThe Knuth\u2013Bendix completion with respect to lexicographic order \n\n\n\nx\n<\n\nx\n\n\u2212\n1\n\n\n<\ny\n<\n\ny\n\n\u2212\n1\n\n\n\n\n{\\displaystyle x<x^{-1}<y<y^{-1}}\n\n finishes with a convergent system, however considering the length-lexicographic order \n\n\n\nx\n<\ny\n<\n\nx\n\n\u2212\n1\n\n\n<\n\ny\n\n\u2212\n1\n\n\n\n\n{\\displaystyle x<y<x^{-1}<y^{-1}}\n\n it does not finish for there are no finite convergent systems compatible with this latter order.[6]\nIf Knuth\u2013Bendix does not succeed, it will either run forever, or fail when it encounters an unorientable equation (i.e. an equation that it cannot turn into a rewrite rule). The enhanced completion without failure will not fail on unorientable equations and provides a semi-decision procedure for the word problem.\nThe notion of logged rewriting discussed in the paper by Heyworth and Wensley listed below allows some recording or logging of the rewriting process as it proceeds. This is useful for computing identities among relations for presentations of groups.", 
    "dbpedia_url": "http://dbpedia.org/resource/Knuth\u2013Bendix_completion_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Knuth\u2013Bendix_completion_algorithm\n"
}