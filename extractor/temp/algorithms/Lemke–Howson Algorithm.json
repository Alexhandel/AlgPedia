{
    "about": "The Lemke\u2013Howson algorithm [1] is an algorithm that computes a Nash equilibrium of a bimatrix game, named after its inventors, Carlton E. Lemke and J. T. Howson. It is said to be \u201cthe best known among the combinatorial algorithms for finding a Nash equilibrium\u201d.[2]", 
    "name": "Lemke\u2013Howson Algorithm", 
    "classification": "Combinatorial Algorithms", 
    "full_text": "The Lemke\u2013Howson algorithm [1] is an algorithm that computes a Nash equilibrium of a bimatrix game, named after its inventors, Carlton E. Lemke and J. T. Howson. It is said to be \u201cthe best known among the combinatorial algorithms for finding a Nash equilibrium\u201d.[2]\nThe input to the algorithm is a 2-player game G. G is represented by two m\u00a0\u00d7\u00a0n game matrices A and B, containing the payoffs for players 1 and 2 respectively, who have m and n pure strategies respectively. In the following we assume that all payoffs are positive. (By rescaling, any game can be transformed to a strategically equivalent game with positive payoffs.)\nG has two corresponding polytopes (called the best-response polytopes) P1 and P2, in m dimensions and n dimensions respectively, defined as follows.\nP1 is in Rm; let {x1,...,xm} denote the coordinates. P1 is defined by m inequalities xi\u00a0\u2265\u00a00, for all i\u00a0\u2208\u00a0{1,...,m}, and a further n inequalities B1,jx1+...+Bm,jxm\u00a0\u2264\u00a01, for all j\u00a0\u2208\u00a0{1,...,n}.\nP2 is in Rn; let {xm+1,...,xm+n} denote the coordinates. P2 is defined by n inequalities xm+i \u2265 0, for all i\u00a0\u2208\u00a0{1,...,n}, and a further m inequalities Ai,1xm+1+...+Ai,nxm+n\u00a0\u2264\u00a01, for all i\u00a0\u2208\u00a0{1,...,m}.\nP1 represents the set of unnormalized probability distributions over player 1\u2019s m pure strategies, such that player 2\u2019s expected payoff is at most 1. The first m constraints require the probabilities to be non-negative, and the other n constraints require each of the n pure strategies of player 2 to have an expected payoff of at most 1. P2 has a similar meaning, reversing the roles of the players.\nEach vertex v of P1 is associated with a set of labels from the set {1,...,m\u00a0+\u00a0n} as follows. For i\u00a0\u2208\u00a0{1,\u00a0...,\u00a0m}, vertex v gets the label i if xi\u00a0=\u00a00 at vertex v. For j\u00a0\u2208\u00a0{1,\u00a0...,\u00a0n}, vertex v gets the label m\u00a0+\u00a0j if B1,jx1\u00a0+\u00a0...\u00a0+\u00a0Bm,jxm\u00a0=\u00a01. Assuming that P1 is nondegenerate, each vertex is incident to m facets of P1 and has m labels. Note that the origin, which is a vertex of P1, has the labels {1,\u00a0...,\u00a0m}.\nEach vertex w of P2 is associated with a set of labels from the set {1,\u00a0...,\u00a0m\u00a0+\u00a0n} as follows. For j\u00a0\u2208\u00a0{1,\u00a0...,\u00a0n}, vertex w gets the label m\u00a0+\u00a0j if xm+j\u00a0=\u00a00 at vertex\u00a0w. For i\u00a0\u2208\u00a0{1,\u00a0...,\u00a0m}, vertex w gets the label i if Ai,1xm+1\u00a0+\u00a0...\u00a0+\u00a0Ai,nxm+n\u00a0=\u00a01. Assuming that P2 is nondegenerate, each vertex is incident to m facets of P2 and has m labels. Note that the origin, which is a vertex of P2, has the labels {m\u00a0+\u00a01,\u00a0...,\u00a0m\u00a0+\u00a0n}.\nConsider pairs of vertices (v,w), v\u00a0\u2208\u00a0P1, w\u00a0\u2208\u00a0P2. We say that (v,w) is completely labeled if the sets associated with v and w contain all labels {1,\u00a0...,\u00a0m\u00a0+\u00a0n}. Note that if v and w are the origins of Rm and Rn respectively, then (v,w) is completely labeled. We say that (v,w) is almost completely labeled (with respect to some missing label g) if the sets associated with v and w contain all labels in {1,\u00a0...,\u00a0m\u00a0+\u00a0n} other than g. Note that in this case, there will be a duplicate label that is associated with both v and w.\nA pivot operation consists of taking some pair (v,w) and replacing v with some vertex adjacent to v in P1, or alternatively replacing w with some vertex adjacent to w in P2. This has the effect (in the case that v is replaced) of replacing some label of v with some other label. The replaced label is said to be dropped. Given any label of v, it is possible to drop that label by moving to a vertex adjacent to v that does not contain the hyperplane associated with that label.\nThe algorithm starts at the completely labeled pair (v,w) consisting of the pair of origins. An arbitrary label g is dropped via a pivot operation, taking us to an almost completely labeled pair (v\u2032,w\u2032). Any almost completely labeled pair admits two pivot operations corresponding to dropping one or other copy of its duplicated label, and each of these operations may result in another almost completely labeled pair, or a completely labeled pair. Eventually the algorithm finds a completely labeled pair (v*,w*), which is not the origin. (v*,w*) corresponds to a pair of unnormalised probability distributions in which every strategy i of player 1 either pays that player 1, or pays less than 1 and is played with probability 0 by that player (and a similar observation holds for player 2). Normalizing these values to probability distributions, we have a Nash equilibrium (whose payoffs to the players are the inverses of the normalization factors).\nThe algorithm can find at most n\u00a0+\u00a0m different Nash equilibria. Any choice of initially-dropped label determines the equilibrium that is eventually found by the algorithm.\nThe Lemke\u2013Howson algorithm is equivalent to the following homotopy-based approach. Modify G by selecting an arbitrary pure strategy g, and giving the player who owns that strategy, a large payment B to play it. In the modified game, that strategy g is played with probability 1, and the other player will play his best response to g with probability 1. Consider the continuum of games in which B is continuously reduced to 0. There exists a path of Nash equilibria connecting the unique equilibrium of the modified game, to an equilibrium of G. The pure strategy g chosen to receive the bonus B corresponds to the initially dropped label. [3]\nWhile the algorithm is efficient in practice, in the worst case the number of pivot operations may need to be exponential in the number of pure strategies in the game. [4] Subsequently, it has been shown that it is PSPACE-complete to find any of the solutions that can be obtained with the Lemke\u2013Howson algorithm. [5]", 
    "dbpedia_url": "http://dbpedia.org/resource/Lemke\u2013Howson_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Lemke\u2013Howson_algorithm\n"
}