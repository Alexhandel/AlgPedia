{
    "about": "In statistics and in statistical physics, the Metropolis\u2013Hastings algorithm is a Markov chain Monte Carlo (MCMC) method for obtaining a sequence of random samples from a probability distribution for which direct sampling is difficult. This sequence can be used to approximate the distribution (e.g., to generate a histogram), or to compute an integral (such as an expected value). Metropolis\u2013Hastings and other MCMC algorithms are generally used for sampling from multi-dimensional distributions, especially when the number of dimensions is high. For single-dimensional distributions, other methods are usually available (e.g. adaptive rejection sampling) that can directly return independent samples from the distribution, and are free from the problem of autocorrelated samples that is inherent in MCMC methods.", 
    "name": "Metropolis\u2013Hastings Algorithm", 
    "classification": "Statistical Algorithms", 
    "full_text": "In statistics and in statistical physics, the Metropolis\u2013Hastings algorithm is a Markov chain Monte Carlo (MCMC) method for obtaining a sequence of random samples from a probability distribution for which direct sampling is difficult. This sequence can be used to approximate the distribution (e.g., to generate a histogram), or to compute an integral (such as an expected value). Metropolis\u2013Hastings and other MCMC algorithms are generally used for sampling from multi-dimensional distributions, especially when the number of dimensions is high. For single-dimensional distributions, other methods are usually available (e.g. adaptive rejection sampling) that can directly return independent samples from the distribution, and are free from the problem of autocorrelated samples that is inherent in MCMC methods.\n\n\nThe algorithm was named after Nicholas Metropolis, who was an author along with Arianna W. Rosenbluth, Marshall N. Rosenbluth, Augusta H. Teller, and Edward Teller of the 1953 paper Equation of State Calculations by Fast Computing Machines which first proposed the algorithm for the case of symmetrical proposal distributions, and W. K. Hastings who extended it to the more general case in 1970.[1] There is controversy over the credit for discovery of the algorithm. Edward Teller states in his memoirs that the five authors of the 1953 paper worked together for \"days (and nights)\".[2] M. Rosenbluth, in an oral history recorded shortly before his death[3] credits E. Teller with posing the original problem, himself with solving it, and A.W. Rosenbluth (his wife) with programming the computer. According to M. Rosenbluth, neither Metropolis nor A.H. Teller participated in any way. Rosenbluth's account of events is supported by other contemporary recollections.[4] According to Roy Glauber and Emilio Segr\u00e8, the original algorithm was invented by Enrico Fermi and reinvented by Stan Ulam.\nThe Metropolis\u2013Hastings algorithm can draw samples from any probability distribution P(x), provided you can compute the value of a function f(x) that is proportional to the density of P. The lax requirement that f(x) should be merely proportional to the density, rather than exactly equal to it, makes the Metropolis\u2013Hastings algorithm particularly useful, because calculating the necessary normalization factor is often extremely difficult in practice.\nThe Metropolis\u2013Hastings algorithm works by generating a sequence of sample values in such a way that, as more and more sample values are produced, the distribution of values more closely approximates the desired distribution, P(x). These sample values are produced iteratively, with the distribution of the next sample being dependent only on the current sample value (thus making the sequence of samples into a Markov chain). Specifically, at each iteration, the algorithm picks a candidate for the next sample value based on the current sample value. Then, with some probability, the candidate is either accepted (in which case the candidate value is used in the next iteration) or rejected (in which case the candidate value is discarded, and current value is reused in the next iteration)\u2212the probability of acceptance is determined by comparing the values of the function f(x) of the current and candidate sample values with respect to the desired distribution P(x).\nFor the purpose of illustration, the Metropolis algorithm, a special case of the Metropolis\u2013Hastings algorithm where the proposal function is symmetric, is described below.\nMetropolis algorithm (symmetric proposal distribution)\nLet f(x) be a function that is proportional to the desired probability distribution P(x) (a.k.a. a target distribution).\nThis algorithm proceeds by randomly attempting to move about the sample space, sometimes accepting the moves and sometimes remaining in place. Note that the acceptance ratio \n\n\n\n\u03b1\n\n\n{\\displaystyle \\alpha }\n\n indicates how probable the new proposed sample is with respect to the current sample, according to the distribution \n\n\n\n\nP\n(\nx\n)\n\n\n\n{\\displaystyle \\displaystyle P(x)}\n\n. If we attempt to move to a point that is more probable than the existing point (i.e. a point in a higher-density region of \n\n\n\n\nP\n(\nx\n)\n\n\n\n{\\displaystyle \\displaystyle P(x)}\n\n), we will always accept the move. However, if we attempt to move to a less probable point, we will sometimes reject the move, and the more the relative drop in probability, the more likely we are to reject the new point. Thus, we will tend to stay in (and return large numbers of samples from) high-density regions of \n\n\n\n\nP\n(\nx\n)\n\n\n\n{\\displaystyle \\displaystyle P(x)}\n\n, while only occasionally visiting low-density regions. Intuitively, this is why this algorithm works, and returns samples that follow the desired distribution \n\n\n\n\nP\n(\nx\n)\n\n\n\n{\\displaystyle \\displaystyle P(x)}\n\n.\nCompared with an algorithm like adaptive rejection sampling[5] that directly generates independent samples from a distribution, Metropolis\u2013Hastings and other MCMC algorithms have a number of disadvantages:\nOn the other hand, most simple rejection sampling methods suffer from the \"curse of dimensionality\", where the probability of rejection increases exponentially as a function of the number of dimensions. Metropolis\u2013Hastings, along with other MCMC methods, do not have this problem to such a degree, and thus are often the only solutions available when the number of dimensions of the distribution to be sampled is high. As a result, MCMC methods are often the methods of choice for producing samples from hierarchical Bayesian models and other high-dimensional statistical models used nowadays in many disciplines.\nIn multivariate distributions, the classic Metropolis\u2013Hastings algorithm as described above involves choosing a new multi-dimensional sample point. When the number of dimensions is high, finding the right jumping distribution to use can be difficult, as the different individual dimensions behave in very different ways, and the jumping width (see above) must be \"just right\" for all dimensions at once to avoid excessively slow mixing. An alternative approach that often works better in such situations, known as Gibbs sampling, involves choosing a new sample for each dimension separately from the others, rather than choosing a sample for all dimensions at once. This is especially applicable when the multivariate distribution is composed out of a set of individual random variables in which each variable is conditioned on only a small number of other variables, as is the case in most typical hierarchical models. The individual variables are then sampled one at a time, with each variable conditioned on the most recent values of all the others. Various algorithms can be used to choose these individual samples, depending on the exact form of the multivariate distribution: some possibilities are the adaptive rejection sampling methods,[5][6][7][8] the adaptive rejection Metropolis sampling algorithm[9] or its improvements[10][11] (see matlab code), a simple one-dimensional Metropolis\u2013Hastings step, or slice sampling.\nThe purpose of the Metropolis\u2013Hastings algorithm is to generate a collection of states according to a desired distribution P(x). To accomplish this, the algorithm uses a Markov process which asymptotically reaches a unique stationary distribution \u03c0(x) such that \u03c0(x)=P(x) .[12]\nA Markov process is uniquely defined by its transition probabilities, \n\n\n\nP\n(\n\nx\n\u2032\n\n\n|\n\nx\n)\n\n\n{\\displaystyle P(x'|x)}\n\n, the probability of transitioning from any given state, x, to any other given state, x'. It has a unique stationary distribution \u03c0(x) when the following two conditions are met:[12]\nThe Metropolis\u2013Hastings algorithm involves designing a Markov process (by constructing transition probabilities) which fulfils the two above conditions, such that its stationary distribution \u03c0(x) is chosen to be P(x). The derivation of the algorithm starts with the condition of detailed balance:\n\n\n\n\nP\n(\n\nx\n\u2032\n\n\n|\n\nx\n)\nP\n(\nx\n)\n=\nP\n(\nx\n\n|\n\n\nx\n\u2032\n\n)\nP\n(\n\nx\n\u2032\n\n)\n\n\n{\\displaystyle P(x'|x)P(x)=P(x|x')P(x')}\n\n\nwhich is re-written as\n\n\n\n\n\n\n\nP\n(\n\nx\n\u2032\n\n\n|\n\nx\n)\n\n\nP\n(\nx\n\n|\n\n\nx\n\u2032\n\n)\n\n\n\n=\n\n\n\nP\n(\n\nx\n\u2032\n\n)\n\n\nP\n(\nx\n)\n\n\n\n\n\n{\\displaystyle {\\frac {P(x'|x)}{P(x|x')}}={\\frac {P(x')}{P(x)}}}\n\n.\nThe approach is to separate the transition in two sub-steps; the proposal and the acceptance-rejection. The proposal distribution \n\n\n\n\ng\n(\n\nx\n\u2032\n\n\n|\n\nx\n)\n\n\n\n{\\displaystyle \\displaystyle g(x'|x)}\n\n is the conditional probability of proposing a state x' given x, and the acceptance distribution \n\n\n\n\nA\n(\n\nx\n\u2032\n\n\n|\n\nx\n)\n\n\n\n{\\displaystyle \\displaystyle A(x'|x)}\n\n the conditional probability to accept the proposed state x'. The transition probability can be written as the product of them:\n\n\n\n\nP\n(\n\nx\n\u2032\n\n\n|\n\nx\n)\n=\ng\n(\n\nx\n\u2032\n\n\n|\n\nx\n)\nA\n(\n\nx\n\u2032\n\n\n|\n\nx\n)\n\n\n{\\displaystyle P(x'|x)=g(x'|x)A(x'|x)}\n\n .\nInserting this relation in the previous equation, we have\n\n\n\n\n\n\n\nA\n(\n\nx\n\u2032\n\n\n|\n\nx\n)\n\n\nA\n(\nx\n\n|\n\n\nx\n\u2032\n\n)\n\n\n\n=\n\n\n\nP\n(\n\nx\n\u2032\n\n)\n\n\nP\n(\nx\n)\n\n\n\n\n\n\ng\n(\nx\n\n|\n\n\nx\n\u2032\n\n)\n\n\ng\n(\n\nx\n\u2032\n\n\n|\n\nx\n)\n\n\n\n\n\n{\\displaystyle {\\frac {A(x'|x)}{A(x|x')}}={\\frac {P(x')}{P(x)}}{\\frac {g(x|x')}{g(x'|x)}}}\n\n .\nThe next step in the derivation is to choose an acceptance that fulfils the condition above. One common choice is the Metropolis choice:\n\n\n\n\nA\n(\n\nx\n\u2032\n\n\n|\n\nx\n)\n=\nmin\n\n(\n1\n,\n\n\n\nP\n(\n\nx\n\u2032\n\n)\n\n\nP\n(\nx\n)\n\n\n\n\n\n\ng\n(\nx\n\n|\n\n\nx\n\u2032\n\n)\n\n\ng\n(\n\nx\n\u2032\n\n\n|\n\nx\n)\n\n\n\n)\n\n\n\n{\\displaystyle A(x'|x)=\\min \\left(1,{\\frac {P(x')}{P(x)}}{\\frac {g(x|x')}{g(x'|x)}}\\right)}\n\n\ni.e., we always accept when the acceptance is bigger than 1, and we reject accordingly when the acceptance is smaller than 1. This is the required quantity for the algorithm.\nThe Metropolis\u2013Hastings algorithm thus consists in the following:\nThe saved states are in principle drawn from the distribution \n\n\n\nP\n(\nx\n)\n\n\n{\\displaystyle P(x)}\n\n, as step 4 ensures they are de-correlated. The value of T must be chosen according to different factors such as the proposal distribution and, formally, it has to be of the order of the autocorrelation time of the Markov process.[13]\nIt is important to notice that it is not clear, in a general problem, which distribution \n\n\n\n\ng\n(\n\nx\n\u2032\n\n\n|\n\nx\n)\n\n\n\n{\\displaystyle \\displaystyle g(x'|x)}\n\n one should use; it is a free parameter of the method which has to be adjusted to the particular problem in hand.\nA common use of Metropolis\u2013Hastings algorithm is to compute an integral. Specifically, consider a space \n\n\n\n\u03a9\n\u2282\n\nR\n\n\n\n{\\displaystyle \\Omega \\subset \\mathbb {R} }\n\n and a probability distribution P(x) over \n\n\n\n\u03a9\n\n\n{\\displaystyle \\Omega }\n\n, \n\n\n\nx\n\u2208\n\u03a9\n\n\n{\\displaystyle x\\in \\Omega }\n\n. Metropolis-Hastings can estimate an integral of the form of\nwhere A(x) is an arbitrary function of interest. For example, consider a statistic E(x) and its probability distribution P(E), which is a marginal distribution. Suppose that the goal is to estimate P(E) for E on the tail of P(E). Formally, P(E) can be written as\nand, thus, estimating P(E) can be accomplished by estimating the expected value of the indicator function \n\n\n\n\nA\n\nE\n\n\n(\nx\n)\n\u2261\n\n\n1\n\n\nE\n\n\n(\nx\n)\n\n\n{\\displaystyle A_{E}(x)\\equiv \\mathbf {1} _{E}(x)}\n\n, which is 1 when \n\n\n\nE\n(\nx\n)\n\u2208\n[\nE\n,\nE\n+\n\u0394\nE\n]\n\n\n{\\displaystyle E(x)\\in [E,E+\\Delta E]}\n\n and zero otherwise. Because E is on the tail of P(E), the probability to draw a state x with E(x) on the tail of P(E) is proportional to P(E), which is small by definition. Metropolis-Hastings can be used here to sample (rare) states more likely and thus increase the number of samples used to estimate P(E) on the tails. This can be done e.g. by using a sampling distribution \n\n\n\n\u03c0\n(\nx\n)\n\n\n{\\displaystyle \\pi (x)}\n\n to favor those states (e.g. \n\n\n\n\u03c0\n(\nx\n)\n\u221d\n\ne\n\na\nE\n\n\n\n\n{\\displaystyle \\pi (x)\\propto e^{aE}}\n\n with a>0).\nSuppose the most recent value sampled is \n\n\n\n\nx\n\nt\n\n\n\n\n\n{\\displaystyle x_{t}\\,}\n\n. To follow the Metropolis\u2013Hastings algorithm, we next draw a new proposal state \n\n\n\n\nx\n\u2032\n\n\n\n\n{\\displaystyle x'\\,}\n\n with probability density \n\n\n\ng\n(\n\nx\n\u2032\n\n\n|\n\n\nx\n\nt\n\n\n)\n\n\n\n{\\displaystyle g(x'|x_{t})\\,}\n\n, and calculate a value\nwhere\nis the probability (e.g., Bayesian posterior) ratio between the proposed sample \n\n\n\n\nx\n\u2032\n\n\n\n\n{\\displaystyle x'\\,}\n\n and the previous sample \n\n\n\n\nx\n\nt\n\n\n\n\n\n{\\displaystyle x_{t}\\,}\n\n, and\nis the ratio of the proposal density in two directions (from \n\n\n\n\nx\n\nt\n\n\n\n\n\n{\\displaystyle x_{t}\\,}\n\n to \n\n\n\n\nx\n\u2032\n\n\n\n\n{\\displaystyle x'\\,}\n\n and vice versa). This is equal to 1 if the proposal density is symmetric. Then the new state \n\n\n\n\n\nx\n\nt\n+\n1\n\n\n\n\n\n{\\displaystyle \\displaystyle x_{t+1}}\n\n is chosen according to the following rules.\nThe Markov chain is started from an arbitrary initial value \n\n\n\n\n\nx\n\n0\n\n\n\n\n\n{\\displaystyle \\displaystyle x_{0}}\n\n and the algorithm is run for many iterations until this initial state is \"forgotten\". These samples, which are discarded, are known as burn-in. The remaining set of accepted values of \n\n\n\nx\n\n\n{\\displaystyle x}\n\n represent a sample from the distribution \n\n\n\nP\n(\nx\n)\n\n\n{\\displaystyle P(x)}\n\n.\nThe algorithm works best if the proposal density matches the shape of the target distribution \n\n\n\n\nP\n(\nx\n)\n\n\n\n{\\displaystyle \\displaystyle P(x)}\n\n from which direct sampling is difficult, that is \n\n\n\ng\n(\n\nx\n\u2032\n\n\n|\n\n\nx\n\nt\n\n\n)\n\u2248\nP\n(\n\nx\n\u2032\n\n)\n\n\n\n\n{\\displaystyle g(x'|x_{t})\\approx P(x')\\,\\!}\n\n. If a Gaussian proposal density \n\n\n\n\ng\n\n\n\n{\\displaystyle \\displaystyle g}\n\n is used the variance parameter \n\n\n\n\n\n\u03c3\n\n2\n\n\n\n\n\n{\\displaystyle \\displaystyle \\sigma ^{2}}\n\n has to be tuned during the burn-in period. This is usually done by calculating the acceptance rate, which is the fraction of proposed samples that is accepted in a window of the last \n\n\n\n\nN\n\n\n\n{\\displaystyle \\displaystyle N}\n\n samples. The desired acceptance rate depends on the target distribution, however it has been shown theoretically that the ideal acceptance rate for a one-dimensional Gaussian distribution is approx 50%, decreasing to approx 23% for an \n\n\n\n\nN\n\n\n\n{\\displaystyle \\displaystyle N}\n\n-dimensional Gaussian target distribution.[14]\nIf \n\n\n\n\n\n\u03c3\n\n2\n\n\n\n\n\n{\\displaystyle \\displaystyle \\sigma ^{2}}\n\n is too small the chain will mix slowly (i.e., the acceptance rate will be high but successive samples will move around the space slowly and the chain will converge only slowly to \n\n\n\n\nP\n(\nx\n)\n\n\n\n{\\displaystyle \\displaystyle P(x)}\n\n). On the other hand, if \n\n\n\n\n\n\u03c3\n\n2\n\n\n\n\n\n{\\displaystyle \\displaystyle \\sigma ^{2}}\n\n is too large the acceptance rate will be very low because the proposals are likely to land in regions of much lower probability density, so \n\n\n\n\n\na\n\n1\n\n\n\n\n\n{\\displaystyle \\displaystyle a_{1}}\n\n will be very small and again the chain will converge very slowly.", 
    "dbpedia_url": "http://dbpedia.org/resource/Metropolis\u2013Hastings_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Metropolis\u2013Hastings_algorithm\n"
}