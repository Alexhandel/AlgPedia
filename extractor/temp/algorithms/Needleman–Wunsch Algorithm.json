{
    "about": "The Needleman\u2013Wunsch algorithm is an algorithm used in bioinformatics to align protein or nucleotide sequences. It was one of the first applications of dynamic programming to compare biological sequences. The algorithm was developed by Saul B. Needleman and Christian D. Wunsch and published in 1970.[1] The algorithm essentially divides a large problem (e.g. the full sequence) into a series of smaller problems and uses the solutions to the smaller problems to reconstruct a solution to the larger problem.[2] It is also sometimes referred to as the optimal matching algorithm and the global alignment technique. The Needleman\u2013Wunsch algorithm is still widely used for optimal global alignment, particularly when the quality of the global alignment is of the utmost importance.", 
    "name": "Needleman\u2013Wunsch Algorithm", 
    "classification": "Bioinformatics Algorithms", 
    "full_text": "The Needleman\u2013Wunsch algorithm is an algorithm used in bioinformatics to align protein or nucleotide sequences. It was one of the first applications of dynamic programming to compare biological sequences. The algorithm was developed by Saul B. Needleman and Christian D. Wunsch and published in 1970.[1] The algorithm essentially divides a large problem (e.g. the full sequence) into a series of smaller problems and uses the solutions to the smaller problems to reconstruct a solution to the larger problem.[2] It is also sometimes referred to as the optimal matching algorithm and the global alignment technique. The Needleman\u2013Wunsch algorithm is still widely used for optimal global alignment, particularly when the quality of the global alignment is of the utmost importance.\n\n\nThis algorithm can be used for any two strings. This guide will use two small DNA sequences as examples as shown in the diagram:\nFirst construct a grid such as one shown in Figure 1 above. Start the first string in the top of the Third column and start the other string at the start of the 3rd row. Fill out the rest of the column and row headers as in Figure 1. There should be no numbers in the grid yet.\nNext we need to decide how to score how each individual pair of letters match up. Just by looking at our two strings you may be able to see one possible best alignment:\nWe can see that letters may match, mismatch, be deleted or inserted (indel):\nThere are various ways to score these three scenarios. These have been outlined in the Scoring Systems section below. For now we will use the simple system used by Needleman and Wunsch; matches are given +1, mismatches are given -1 and indels are given -1.[1]\nStart with a zero in the second row, second column. Move through the cells row by row, calculating the score for each cell. The score is calculated as the best possible score (i.e. highest) from existing scores to the left, top or top-left (diagonal). When a score is calculated from the top, or from the left this represents an indel in our alignment. When we calculate scores from the diagonal this represents the alignment of the two letters the resulting cell matches to. Given there is no 'top' or 'top-left' cells for the second row we can only add from the existing cell to the left. Hence we add -1 for each shift to the right as this represents an indel from the previous score. This results in the first row being 0, -1, -2, -3, -4, -5, -6, -7. The same applies to the second column as we only have existing scores above. Thus we have:\nThe first case with existing scores in all 3 directions is the intersection of our first letters (in this case G and G). The surrounding cells are below:\nAs for all following cells, we have three options here. Firstly the score could be calculated from the existing score on top. In this case we would add -1 as this represents an indel, resulting in a total of -2. The same applies if we calculate from the existing score to the left. Calculating from the diagonal (top-left) existing score represents two letters aligned together. If the letters are the same this is a match, otherwise it is a mismatch. In this case the bases match and so we add +1. So we have -2, -2 and +1 as possible scores to choose from. The diagonal score is the best score so we give the cell a score of 1. We also need to keep track of where the score came from, shown as an arrow in the completed figure. Below shows samples from our example where the best score comes from the left and top cells respectively.\nIn some cells 2 or even all 3 of the originating cells may result in equal best scores such as this segment of figure x:\nHere we can see that the score of zero is obtained both from the top cell and the top-left cell (both are 1 \u2013 1=0). This represents the branching of two equally good alignments. In this scenario we need to fill in arrows to both cells. Follow this procedure for all the remaining cells until the table is filled.\nThe score in the last cell (bottom right) represents the alignment score for the best alignment.\nNote that there are multiple equally 'best' alignments, here we show just one.\nFollow the arrows back to the original cell to obtain the path for the best alignment. Then follow the path from start to finish to construct the alignment based on these rules\nFollowing these rules one possible alignment is constructed as follows:\nThe simplest scoring schemes simply give a value for each match, mismatch and indel. The step-by-step guide above uses match = 1, mismatch = -1, indel = -1. Thus the lower the alignment score the larger the edit distance, for this scoring system we want a high score. Another scoring system might be:\nFor this system the alignment score will represent the edit distance between the two strings. Different scoring systems can be devised for different situations, for example if gaps are considered very bad for your alignment you may use a scoring system that penalises gaps heavily, such as:\nMore complicated scoring systems attribute values not only for the type of alteration, but also for the letters that are involved. For example, a match between A and A may be given 1, but a match between T and T may be given 4. Here (assuming the first scoring system) more importance is given to the Ts matching than the As, i.e. we think the Ts matching is more significant to our alignment. This weighting based on letters also applies to mismatches. In order to represent all the possible combinations of letters and their resulting scores we use a similarity matrix. The similarity matrix for the most basic system is represented as:\nEach score represents a switch from one of the letters the cell matches to the other. Hence this represents all possible matches and deletions (for an alphabet of ACGT). Note all the matches go along the diagonal, also not all the table needs to be filled, only this triangle because the scores are reciprocal.= (Score for A \u2192 C = Score for C \u2192 A). If we implement our T-T = 4 from above we get:\nDifferent scoring matrices have been statistically constructed which give weight to different actions appropriate to a particular scenario. Having weighted scoring matrices is particularly important in protein sequence alignment due to the varying frequency of the different amino acids. There are two broad families of scoring matrices, each with further alterations for specific scenarios:\nWhen aligning sequences there are often gaps (i.e. indels), sometimes large ones. Biologically, a large gap is more likely to occur as one large deletion as opposed to multiple single deletions. Hence we should score two small indels to be worse than one large one. The simple and common way to do this is via a large gap-start score for a new indel and a smaller gap-extension score for every letter which extends the indel. For example, new-indel may cost -5 and extend-indel may cost -1. In this way an alignment such as:\nwhich has multiple equal alignments, some with multiple small alignments will now align as:\nor any alignment with a 4 long gap in preference over multiple small gaps.\nScores for aligned characters are specified by a similarity matrix. Here, S(a, b) is the similarity of characters a and b. It uses a linear gap penalty, here called d.\nFor example, if the similarity matrix was\nthen the alignment:\nwith a gap penalty of -5, would have the following score:\nTo find the alignment with the highest score, a two-dimensional array (or matrix) F is allocated. The entry in row i and column j is denoted here by \n\n\n\n\nF\n\ni\nj\n\n\n\n\n{\\displaystyle F_{ij}}\n\n. There is one row for each character in sequence A, and one column for each character in sequence B. Thus, if we are aligning sequences of sizes n and m, the amount of memory used is in \n\n\n\nO\n(\nn\nm\n)\n\n\n{\\displaystyle O(nm)}\n\n. Hirschberg's algorithm only holds a subset of the array in memory and uses \n\n\n\n\u0398\n(\nmin\n{\nn\n,\nm\n}\n)\n\n\n{\\displaystyle \\Theta (\\min\\{n,m\\})}\n\n space, but is otherwise similar to Needleman-Wunsch (and still requires \n\n\n\nO\n(\nn\nm\n)\n\n\n{\\displaystyle O(nm)}\n\n time).\nAs the algorithm progresses, the \n\n\n\n\nF\n\ni\nj\n\n\n\n\n{\\displaystyle F_{ij}}\n\n will be assigned to be the optimal score for the alignment of the first \n\n\n\ni\n=\n0\n,\n\u2026\n,\nn\n\n\n{\\displaystyle i=0,\\dotsc ,n}\n\n characters in A and the first \n\n\n\nj\n=\n0\n,\n\u2026\n,\nm\n\n\n{\\displaystyle j=0,\\dotsc ,m}\n\n characters in B. The principle of optimality is then applied as follows:\nThe pseudo-code for the algorithm to compute the F matrix therefore looks like this:\nOnce the F matrix is computed, the entry \n\n\n\n\nF\n\nn\nm\n\n\n\n\n{\\displaystyle F_{nm}}\n\n gives the maximum score among all possible alignments. To compute an alignment that actually gives this score, you start from the bottom right cell, and compare the value with the three possible sources (Match, Insert, and Delete above) to see which it came from. If Match, then \n\n\n\n\nA\n\ni\n\n\n\n\n{\\displaystyle A_{i}}\n\n and \n\n\n\n\nB\n\nj\n\n\n\n\n{\\displaystyle B_{j}}\n\n are aligned, if Delete, then \n\n\n\n\nA\n\ni\n\n\n\n\n{\\displaystyle A_{i}}\n\n is aligned with a gap, and if Insert, then \n\n\n\n\nB\n\nj\n\n\n\n\n{\\displaystyle B_{j}}\n\n is aligned with a gap. (In general, more than one choice may have the same value, leading to alternative optimal alignments.)\nThe original purpose of the algorithm described by Needleman and Wunsch was to find similarities in the amino acid sequences of two proteins.[1]\nNeedleman and Wunsch describe their algorithm explicitly for the case when the alignment is penalized solely by the matches and mismatches, and gaps have no penalty (d=0). The original publication from 1970 suggests the recursion \n\n\n\n\nF\n\ni\nj\n\n\n=\n\nmax\n\nh\n<\ni\n,\nk\n<\nj\n\n\n{\n\nF\n\nh\n,\nj\n\u2212\n1\n\n\n+\nS\n(\n\nA\n\ni\n\n\n,\n\nB\n\nj\n\n\n)\n,\n\nF\n\ni\n\u2212\n1\n,\nk\n\n\n+\nS\n(\n\nA\n\ni\n\n\n,\n\nB\n\nj\n\n\n)\n}\n\n\n{\\displaystyle F_{ij}=\\max _{h<i,k<j}\\{F_{h,j-1}+S(A_{i},B_{j}),F_{i-1,k}+S(A_{i},B_{j})\\}}\n\n.\nThe corresponding dynamic programming algorithm takes cubic time. The paper also points out that the recursion can accommodate arbitrary gap penalization formulas:\nA penalty factor, a number subtracted for every gap made, may be assessed as a barrier to allowing the gap. The penalty factor could be a function of the size and/or direction of the gap. [page 444]\nA better dynamic programming algorithm with quadratic running time for the same problem (no gap penalty) was first introduced[3] by David Sankoff in 1972. Similar quadratic-time algorithms were discovered independently by T. K. Vintsyuk[4] in 1968 for speech processing (\"time warping\"), and by Robert A. Wagner and Michael J. Fischer[5] in 1974 for string matching.\nNeedleman and Wunsch formulated their problem in terms of maximizing similarity. Another possibility is to minimize the edit distance between sequences, introduced by Vladimir Levenshtein. Peter H. Sellers showed[6] in 1974 that the two problems are equivalent.\nThe Needleman\u2013Wunsch algorithm is still widely used for optimal global alignment, particularly when the quality of the global alignment is of the utmost importance. However, the algorithm is expensive with respect to time and space, proportional to the product of the length of two sequences and hence is not suitable for long sequences.\nRecent development has focused on improving the time and space cost of the algorithm while maintaining quality. For example, in 2013, a Fast Optimal Global Sequence Alignment Algorithm (FOGSAA),[7] suggested alignment of nucleotide/protein sequences faster than other optimal global alignment methods, including the Needleman\u2013Wunsch algorithm. The paper claims that when compared to the Needleman\u2013Wunsch algorithm, FOGSAA achieves a time gain of 70\u201390% for highly similar nucleotide sequences (with > 80% similarity), and 54\u201370% for sequences having 30\u201380% similarity.\nStereo matching is an essential step in the process of 3D reconstruction from a pair of stereo images. When images have been rectified, an analogy can be drawn between aligning nucleotide/protein sequences and matching pixels belonging to scan lines, since both tasks aim at establishing optimal correspondence between two strings of characters. Indeed, the \u2018right\u2019 image of a stereo pair can be seen as a mutated version of the \u2018left\u2019 image: noise and individual camera sensitivity alter pixel values (i.e. character substitutions); and different view angle reveals previously occluded data and introduces new occlusions (i.e. insertion and deletion of characters). As consequence, minor modifications of the Needleman\u2013Wunsch algorithm make it suitable for stereo matching.[8] Although performances in terms of accuracy are not state-of-the-art, the relative simplicity of the algorithm allows its implementation on embedded systems.[9]\nAlthough in many applications image rectification can be performed, e.g. by camera resectioning or calibration, it is sometimes impossible or impractical since the computational cost of accurate rectification models prohibit their usage in real-time applications. Moreover, none of these models is suitable when a camera lens displays unexpected distortions, such as those generated by raindrops, weatherproof covers or dust. By extending the Needleman\u2013Wunsch algorithm, a line in the \u2018left\u2019 image can be associated to a curve in the \u2018right\u2019 image by finding the alignment with the highest score in a three-dimensional array (or matrix). Experiments demonstrated that such extension allows dense pixel matching between unrectified and/or distorted images.[10]", 
    "dbpedia_url": "http://dbpedia.org/resource/Needleman\u2013Wunsch_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Needleman\u2013Wunsch_algorithm\n"
}