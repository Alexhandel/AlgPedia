ABOUT
In computer science, Union Find is an algorithm for doing certain operations on sets. This page is about proof of O(log*n) amortized time [1] of Union Find[2][3][4]
FULL TEXT
In computer science, Union Find is an algorithm for doing certain operations on sets. This page is about proof of O(log*n) amortized time [1] of Union Find[2][3][4]
Statement: If m operations, either Union or Find, are applied to n elements, the total run time is O(m log*n), where log* is the iterated logarithm.
Lemma 1: As the find function follows the path along to the root, the rank of node it encounters is increasing.
Lemma 2: A node u which is root of a subtree with rank r has at least 2r nodes.
Lemma 3: The maximum number of nodes of rank r is at most n/2r.
For convenience, we define "bucket" here: a bucket is a set that contains vertices with particular ranks.
We create some buckets and put vertices into the buckets according to their ranks inductively. That is, vertices with rank 0 go into the zeroth bucket, vertices with rank 1 go into the first bucket, vertices with ranks 2 and 3 go into the second bucket. If the Bth bucket contains vertices with ranks from interval [r, 2r − 1] = [r, R - 1] then the (B+1)st bucket will contain vertices with ranks from interval [R, 2R − 1].
We can make two observations about the buckets.
Let F represent the list of "find" operations performed, and let





T

1


=

∑

F



(link to the root)



{\displaystyle T_{1}=\sum _{F}{\text{(link to the root)}}}







T

2


=

∑

F



(number of links traversed where the buckets are different)



{\displaystyle T_{2}=\sum _{F}{\text{(number of links traversed where the buckets are different)}}}







T

3


=

∑

F



(number of links traversed where the buckets are the same).



{\displaystyle T_{3}=\sum _{F}{\text{(number of links traversed where the buckets are the same).}}}


Then the total cost of m finds is T = T1 + T2 + T3
Since each find operation makes exactly one traversal that leads to a root, we have T1 = O(m).
Also, from the bound above on the number of buckets, we have T2 = O(mlog*n).
For T3, suppose we are traversing from u to v, where u and v have rank in the bucket [B, 2B − 1]. From lemma 1, we know that the number of times we traversed a link (u,v) where u and v were in the same bucket is at most 2B − 1 − B, which is at most 2B.
Therefore, 




T

3


=

∑

[
B
,

2

B


−
1
]



∑

u



2

B




{\displaystyle T_{3}=\sum _{[B,2^{B}-1]}\sum _{u}2^{B}}


From Observations 1 and 2, we can conclude that 




T

3


≤

∑

B



2

B





2
n


2

B




≤
2
n

log

∗


⁡
n
.


{\displaystyle T_{3}\leq \sum _{B}2^{B}{\frac {2n}{2^{B}}}\leq 2n\log ^{*}n.}


Therefore, T = T1 + T2 + T3 = O(m log*n).