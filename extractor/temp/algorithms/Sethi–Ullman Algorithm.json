{
    "about": "In computer science, the Sethi\u2013Ullman algorithm is an algorithm named after Ravi Sethi and Jeffrey D. Ullman, its inventors, for translating abstract syntax trees into machine code that uses as few registers as possible.", 
    "name": "Sethi\u2013Ullman Algorithm", 
    "classification": "Graph Algorithms", 
    "full_text": "In computer science, the Sethi\u2013Ullman algorithm is an algorithm named after Ravi Sethi and Jeffrey D. Ullman, its inventors, for translating abstract syntax trees into machine code that uses as few registers as possible.\n\n\nWhen generating code for arithmetic expressions, the compiler has to decide which is the best way to translate the expression in terms of number of instructions used as well as number of registers needed to evaluate a certain subtree. Especially in the case that free registers are scarce, the order of evaluation can be important to the length of the generated code, because different orderings may lead to larger or smaller numbers of intermediate values being spilled to memory and then restored. The Sethi\u2013Ullman algorithm (also known as Sethi\u2013Ullman numbering) fulfills the property of producing code which needs the least number of instructions possible as well as the least number of storage references (under the assumption that at the most commutativity and associativity apply to the operators used, but distributive laws i.e. \n\n\n\na\n\u2217\nb\n+\na\n\u2217\nc\n=\na\n\u2217\n(\nb\n+\nc\n)\n\n\n{\\displaystyle a*b+a*c=a*(b+c)}\n\n do not hold). Please note that the algorithm succeeds as well if neither commutativity nor associativity hold for the expressions used, and therefore arithmetic transformations can not be applied. The algorithm also does not take advantage of common subexpressions or apply directly to expressions represented as general directed acyclic graphs rather than trees.\nThe simple Sethi\u2013Ullman algorithm works as follows (for a load/store architecture):\nFor an arithmetic expression \n\n\n\na\n=\n(\nb\n+\nc\n+\nf\n\u2217\ng\n)\n\u2217\n(\nd\n+\n3\n)\n\n\n{\\displaystyle a=(b+c+f*g)*(d+3)}\n\n, the abstract syntax tree looks like this:\nTo continue with the algorithm, we need only to examine the arithmetic expression \n\n\n\n(\nb\n+\nc\n+\nf\n\u2217\ng\n)\n\u2217\n(\nd\n+\n3\n)\n\n\n{\\displaystyle (b+c+f*g)*(d+3)}\n\n, i.e. we only have to look at the right subtree of the assignment '=':\nNow we start traversing the tree (in preorder for now), assigning the number of registers needed to evaluate each subtree (note that the last summand in the expression \n\n\n\n(\nb\n+\nc\n+\nf\n\u2217\ng\n)\n\u2217\n(\nd\n+\n3\n)\n\n\n{\\displaystyle (b+c+f*g)*(d+3)}\n\n is a constant):\nFrom this tree it can be seen that we need 2 registers to compute the left subtree of the '*', but only 1 register to compute the right subtree. Nodes 'c' and 'g' do not need registers for the following reasons: If T is a tree leaf, then the number of registers to evaluate T is either 1 or 0 depending whether T is a left or a right subtree (since an operation such as add R1, A can handle the right component A directly without storing it into a register). Therefore we shall start to emit code for the left subtree first, because we might run into the situation that we only have 2 registers left to compute the whole expression. If we now computed the right subtree first (which needs only 1 register), we would then need a register to hold the result of the right subtree while computing the left subtree (which would still need 2 registers), therefore needing 3 registers concurrently. Computing the left subtree first needs 2 registers, but the result can be stored in 1, and since the right subtree needs only 1 register to compute, the evaluation of the expression can do with only 2 registers left.\nIn an advanced version of the Sethi\u2013Ullman algorithm, the arithmetic expressions are first transformed, exploiting the algebraic properties of the operators used.", 
    "dbpedia_url": "http://dbpedia.org/resource/Sethi\u2013Ullman_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Sethi\u2013Ullman_algorithm\n"
}