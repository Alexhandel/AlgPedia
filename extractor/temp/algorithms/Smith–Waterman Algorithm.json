{
    "about": "The Smith\u2013Waterman algorithm performs local sequence alignment; that is, for determining similar regions between two strings of nucleic acid sequences or protein sequences. Instead of looking at the entire sequence, the Smith\u2013Waterman algorithm compares segments of all possible lengths and optimizes the similarity measure.", 
    "name": "Smith\u2013Waterman Algorithm", 
    "classification": "Bioinformatics Algorithms", 
    "full_text": "The Smith\u2013Waterman algorithm performs local sequence alignment; that is, for determining similar regions between two strings of nucleic acid sequences or protein sequences. Instead of looking at the entire sequence, the Smith\u2013Waterman algorithm compares segments of all possible lengths and optimizes the similarity measure.\nThe algorithm was first proposed by Temple F. Smith and Michael S. Waterman in 1981.[1] Like the Needleman\u2013Wunsch algorithm, of which it is a variation, Smith\u2013Waterman is a dynamic programming algorithm. As such, it has the desirable property that it is guaranteed to find the optimal local alignment with respect to the scoring system being used (which includes the substitution matrix and the gap-scoring scheme). The main difference to the Needleman\u2013Wunsch algorithm is that negative scoring matrix cells are set to zero, which renders the (thus positively scoring) local alignments visible. Traceback procedure starts at the highest scoring matrix cell and proceeds until a cell with score zero is encountered, yielding the highest scoring local alignment. Because of its cubic computational complexity in time and quadratic complexity in space, it often cannot be practically applied to large-scale problems and is replaced in favor of less general but computationally more efficient alternatives such as (Gotoh, 1982),[2] (Altschul and Erickson, 1986),[3] and (Myers and Miller 1988).[4]\n\n\nIn 1970, Saul B. Needleman and Christian D. Wunsch proposed a heuristic homology algorithm for sequence alignment, also referred to as the Needleman\u2013Wunsch algorithm.[5] It is a global alignment algorithm that requires \n\n\n\nO\n(\nm\nn\n)\n\n\n{\\displaystyle O(mn)}\n\n calculation steps (\n\n\n\nm\n\n\n{\\displaystyle m}\n\n and \n\n\n\nn\n\n\n{\\displaystyle n}\n\n are the lengths of the two sequences being aligned). It uses the iterative calculation of a matrix for the purpose of showing global alignment. In the following decade, Sankoff,[6] Reichert,[7] Beyer[8] and others formulated alternative heuristic algorithms for analyzing gene sequences. Sellers introduced a system for measuring sequence distances.[9] In 1976, Waterman et al. added the concept of gaps into the original measurement system.[10] In 1981, Smith and Waterman published their Smith\u2013Waterman algorithm for calculating local alignment.\nThe Smith\u2013Waterman algorithm is fairly demanding of time: To align two sequences of lengths \n\n\n\nm\n\n\n{\\displaystyle m}\n\n and \n\n\n\nn\n\n\n{\\displaystyle n}\n\n, \n\n\n\nO\n(\n\nm\n\n2\n\n\nn\n)\n\n\n{\\displaystyle O(m^{2}n)}\n\n time is required. Gotoh[2] and Altschul[3] optimized the algorithm to \n\n\n\nO\n(\nm\nn\n)\n\n\n{\\displaystyle O(mn)}\n\n steps. The space complexity was optimized by Myers and Miller[4] from \n\n\n\nO\n(\nm\nn\n)\n\n\n{\\displaystyle O(mn)}\n\n to \n\n\n\nO\n(\nn\n)\n\n\n{\\displaystyle O(n)}\n\n (linear), where \n\n\n\nn\n\n\n{\\displaystyle n}\n\n is the length of the shorter sequence.\nIn recent years, genome projects conducted on a variety of organisms generated massive amounts of sequence data for genes and proteins, which requires computational analysis. Sequence alignment shows the relations between genes or between proteins, leading to a better understanding of their homology and functionality. Sequence alignment can also reveal conserved domains and motifs.\nOne motivation for local alignment is the difficulty of obtaining correct alignments in regions of low similarity between distantly related biological sequences, because mutations have added too much 'noise' over evolutionary time to allow for a meaningful comparison of those regions. Local alignment avoids such regions altogether and focuses on those with a positive score, i.e. those with an evolutionarily conserved signal of similarity. A prerequisite for local alignment is a negative expectation score. The expectation score is defined as the average score that the scoring system (substitution matrix and gap penalties) would yield for a random sequence.\nAnother motivation for using local alignments is that there is a reliable statistical model (developed by Karlin and Altschul) for optimal local alignments. The alignment of unrelated sequences tends to produce optimal local alignment scores which follow an extreme value distribution. This property allows programs to produce an expectation value for the optimal local alignment of two sequences, which is a measure of how often two unrelated sequences would produce an optimal local alignment whose score is greater than or equal to the observed score. Very low expectation values indicate that the two sequences in question might be homologous, meaning they might share a common ancestor.\nLet \n\n\n\nA\n=\n\na\n\n1\n\n\n\na\n\n2\n\n\n.\n.\n.\n\na\n\nn\n\n\n\n\n{\\displaystyle A=a_{1}a_{2}...a_{n}}\n\n and \n\n\n\nB\n=\n\nb\n\n1\n\n\n\nb\n\n2\n\n\n.\n.\n.\n\nb\n\nm\n\n\n\n\n{\\displaystyle B=b_{1}b_{2}...b_{m}}\n\n be the sequences to be aligned, where \n\n\n\nn\n\n\n{\\displaystyle n}\n\n and \n\n\n\nm\n\n\n{\\displaystyle m}\n\n are the lengths of \n\n\n\nA\n\n\n{\\displaystyle A}\n\n and \n\n\n\nB\n\n\n{\\displaystyle B}\n\n respectively.\nSmith\u2013Waterman algorithm aligns two sequences by matches/mismatches (also known as substitutions), insertions, and deletions. Both insertions and deletions are the operations that introduce gaps, which are represented by dashes. The Smith\u2013Waterman algorithm has several steps:\nThe Smith\u2013Waterman algorithm finds the segments in two sequences that have similarities while the Needleman\u2013Wunsch algorithm aligns two complete sequences. Therefore, they serve different purposes. Both algorithms use the concepts of a substitution matrix, a gap penalty function, a scoring matrix, and a traceback process. Three main differences are:\nOne of the most important distinctions is that no negative score is assigned in the scoring system of the Smith\u2013Waterman algorithm, which enables local alignment. When any element has a score lower than zero, it means that the sequences up to this position have no similarities; this element will then be set to zero to eliminate influence from previous alignment. In this way, calculation can continue to find alignment in any position afterwards.\nThe initial scoring matrix of Smith\u2013Waterman algorithm enables the alignment of any segment of one sequence to an arbitrary position in the other sequence. In Needleman\u2013Wunsch algorithm, however, end gap penalty also needs to be considered in order to align the full sequences.\nEach base substitution or amino acid substitution is assigned a score. In general, matches are assigned positive scores, and mismatches are assigned relatively lower scores. Take DNA sequence as an example. If matches get +1, mismatches get -1, then the substitution matrix is:\nThis substitution matrix can be described as: \n\n\n\ns\n(\n\na\n\ni\n\n\n,\n\nb\n\nj\n\n\n)\n=\n\n\n{\n\n\n\n+\n1\n,\n\n\na\n\ni\n\n\n=\n\nb\n\nj\n\n\n\n\n\n\n\u2212\n1\n,\n\n\na\n\ni\n\n\n\u2260\n\nb\n\nj\n\n\n\n\n\n\n\n\n\n\n{\\displaystyle s(a_{i},b_{j})={\\begin{cases}+1,\\quad a_{i}=b_{j}\\\\-1,\\quad a_{i}\\neq b_{j}\\end{cases}}}\n\n\nDifferent base substitutions or amino acid substitutions can have different scores. The substitution matrix of amino acids is usually more complicated than that of the bases. See PAM, BLOSUM.\nGap penalty designates scores for insertion or deletion. A simple gap penalty strategy is to use fixed score for each gap. In biology, however, the score needs to be counted differently for practical reasons. On the one hand, partial similarity between two sequences is a common phenomenon; on the other hand, a single gene mutation event can result in insertion of a single long gap. Therefore, connected gaps forming a long gap usually is more favored than multiple scattered, short gaps. In order to take this difference into consideration, the concepts of gap opening and gap extension have been added to the scoring system. The gap opening score is usually higher than the gap extension score. For instance, the default parameter in EMBOSS Water are: gap opening = 10, gap extension = 0.5.\nHere we discuss two common strategies for gap penalty. See Gap penalty for more strategies. Let \n\n\n\n\nW\n\nk\n\n\n\n\n{\\displaystyle W_{k}}\n\n be the gap penalty function for a gap of length \n\n\n\nk\n\n\n{\\displaystyle k}\n\n:\nA linear gap penalty has the same scores for opening and extending a gap:\n\n\n\n\n\nW\n\nk\n\n\n=\nk\n\nW\n\n1\n\n\n\n\n{\\displaystyle W_{k}=kW_{1}}\n\n,\nwhere \n\n\n\n\nW\n\n1\n\n\n\n\n{\\displaystyle W_{1}}\n\n is the cost of a single gap.\nThe gap penalty is directly proportional to the gap length. When linear gap penalty is used, the Smith\u2013Waterman algorithm can be simplified to:\n\n\n\n\n\nH\n\ni\nj\n\n\n=\nmax\n\n\n{\n\n\n\n\nH\n\ni\n\u2212\n1\n,\nj\n\u2212\n1\n\n\n+\ns\n(\n\na\n\ni\n\n\n,\n\nb\n\nj\n\n\n)\n,\n\n\n\n\n\nH\n\ni\n\u2212\n1\n,\nj\n\n\n\u2212\n\nW\n\n1\n\n\n,\n\n\n\n\n\nH\n\ni\n,\nj\n\u2212\n1\n\n\n\u2212\n\nW\n\n1\n\n\n,\n\n\n\n\n0\n\n\n\n\n\n\n\n\n{\\displaystyle H_{ij}=\\max {\\begin{cases}H_{i-1,j-1}+s(a_{i},b_{j}),\\\\H_{i-1,j}-W_{1},\\\\H_{i,j-1}-W_{1},\\\\0\\end{cases}}}\n\n\nThe simplified algorithm uses \n\n\n\nO\n(\nm\nn\n)\n\n\n{\\displaystyle O(mn)}\n\n steps. When an element is being scored, only the gap penalties from the elements that are directly adjacent to this element need to be considered.\nAn affine gap penalty considers gap opening and extension separately:\n\n\n\n\n\nW\n\nk\n\n\n=\nu\n(\nk\n\u2212\n1\n)\n+\nv\n\n(\nu\n>\n0\n,\nv\n>\n0\n)\n\n\n{\\displaystyle W_{k}=u(k-1)+v\\quad (u>0,v>0)}\n\n,\nwhere \n\n\n\nv\n\n\n{\\displaystyle v}\n\n is the gap opening penalty, and \n\n\n\nu\n\n\n{\\displaystyle u}\n\n is the gap extension penalty. For example, the penalty for a gap of length 2 is \n\n\n\nu\n+\nv\n\n\n{\\displaystyle u+v}\n\n.\nAffine gap penalty was the native gap penalty strategy proposed in the original Smith\u2013Waterman algorithm paper. It uses \n\n\n\nO\n(\n\nm\n\n2\n\n\nn\n)\n\n\n{\\displaystyle O(m^{2}n)}\n\n steps, therefore is quite demanding of time. Gotoh optimized the steps to \n\n\n\nO\n(\nm\nn\n)\n\n\n{\\displaystyle O(mn)}\n\n,[2] but the optimized algorithm only attempts to find one optimal alignment, and the optimal alignment is not guaranteed to be found.[3] Altschul modified Gotoh's algorithm to find all optimal alignments while maintaining the computational complexity.[3] Later, Myers and Miller pointed out that Gotoh and Altschul's algorithm can be further modified based on the method that was published by Hirschberg in 1975,[11] and applied this method.[4] Myers and Miller's algorithm can align two sequences using \n\n\n\nO\n(\nn\n)\n\n\n{\\displaystyle O(n)}\n\n space, with \n\n\n\nn\n\n\n{\\displaystyle n}\n\n being the length of the shorter sequence.\nTake the alignment of sequences TACGGGCCCGCTAC and TAGCCCTATCGGTCA as an example. When linear gap penalty function is used, the result is (Alignments performed by EMBOSS Water. Substitution matrix is DNAfull. Gap opening and extension both are 1.0):\nWhen affine gap penalty is used, the result is (Gap opening and extension are 5.0 and 1.0 respectively):\nThis example shows that an affine gap penalty can help avoid scattered small gaps.\nThe function of the scoring matrix is to conduct one-to-one comparisons between all components in two sequences and record the optimal alignment results. The scoring process reflects the concept of dynamic programming. The final optimal alignment is found by iteratively expanding the growing optimal alignment. In other words, the current optimal alignment is generated by deciding which path (match/mismatch or inserting gap) gives the highest score from the previous optimal alignment. The size of the matrix is the length of one sequence plus 1 by the length of the other sequence plus 1. The additional first row and first column serve the purpose of aligning one sequence to any positions in the other sequence. Both the first line and the first column are set to 0 so that end gap is not penalized. The initial scoring matrix is:\nTake the alignment of DNA sequences TGTTACGG and GGTTGACTA as an example. Use the following scheme:\nInitialize and fill the scoring matrix, shown as below. This figure shows the scoring process of the first three elements. The yellow color indicates the bases that are being considered. The red color indicates the highest possible score for the cell being scored.\nThe finished scoring matrix is shown below on the left. The blue color shows the highest score. Note that an element can receive score from more than one element, each will form a different path if this element is traced back. In case of multiple highest scores, traceback should be done starting with each highest score. The traceback process is shown below on the right. The best local alignment is generated in the reverse direction.\nThe alignment result is:\nAn implementation of the Smith\u2013Waterman Algorithm, SSEARCH, is available in the FASTA sequence analysis package from [4]. This implementation includes Altivec accelerated code for PowerPC G4 and G5 processors that speeds up comparisons 10\u201320-fold, using a modification of the Wozniak, 1997 approach,[12] and an SSE2 vectorization developed by Farrar[13] making optimal protein sequence database searches quite practical. A library, SSW, extends Farrar's implementation to return alignment information in addition to the optimal Smith\u2013Waterman score.[14]\nCray demonstrated acceleration of the Smith\u2013Waterman algorithm using a reconfigurable computing platform based on FPGA chips, with results showing up to 28x speed-up over standard microprocessor-based solutions. Another FPGA-based version of the Smith\u2013Waterman algorithm shows FPGA (Virtex-4) speedups up to 100x[15] over a 2.2\u00a0GHz Opteron processor.[16] The TimeLogic DeCypher and CodeQuest systems also accelerate Smith\u2013Waterman and Framesearch using PCIe FPGA cards.\nA 2011 Master's thesis [17] includes an analysis of FPGA-based Smith\u2013Waterman acceleration.\nIn a 2016 publication [5], a very efficient implementation was presented. Using one PCIe FPGA card equipped with a Xilinx Virtex-7 2000T FPGA, the performance per Watt level was better than CPU/GPU by 12-21x.\nLawrence Livermore National Laboratory and the US Department of Energy's Joint Genome Institute implemented an accelerated version of Smith\u2013Waterman local sequence alignment searches using graphics processing units (GPUs) with preliminary results showing a 2x speed-up over software implementations.[18] A similar method has already been implemented in the Biofacet software since 1997, with the same speed-up factor.[19]\nSeveral GPU implementations of the algorithm in NVIDIA's CUDA C platform are also available.[20] When compared to the best known CPU implementation (using SIMD instructions on the x86 architecture), by Farrar, the performance tests of this solution using a single NVidia GeForce 8800 GTX card show a slight increase in performance for smaller sequences, but a slight decrease in performance for larger ones. However the same tests running on dual NVidia GeForce 8800 GTX cards are almost twice as fast as the Farrar implementation for all sequence sizes tested.\nA newer GPU CUDA implementation of SW is now available that is faster than previous versions and also removes limitations on query lengths. See CUDASW++.\nEleven different SW implementations on CUDA have been reported, three of which report speedups of 30X.[21]\nIn 2000, a fast implementation of the Smith\u2013Waterman algorithm using the SIMD technology available in Intel Pentium MMX processors and similar technology was described in a publication by Rognes and Seeberg.[22] In contrast to the Wozniak (1997) approach, the new implementation was based on vectors parallel with the query sequence, not diagonal vectors. The company Sencel Bioinformatics has applied for a patent covering this approach. Sencel is developing the software further and provides executables for academic use free of charge.\nA SSE2 vectorization of the algorithm (Farrar, 2007) is now available providing an 8-16-fold speedup on Intel/AMD processors with SSE2 extensions.[13] When running on Intel processor using the Core microarchitecture the SSE2 implementation achieves a 20-fold increase. Farrar's SSE2 implementation is available as the SSEARCH program in the FASTA sequence comparison package. The SSEARCH is included in the European Bioinformatics Institute's suite of similarity searching programs.\nDanish bioinformatics company CLC bio has achieved speed-ups of close to 200 over standard software implementations with SSE2 on an Intel 2.17\u00a0GHz Core 2 Duo CPU, according to a publicly available white paper.\nAccelerated version of the Smith\u2013Waterman algorithm, on Intel and AMD based Linux servers, is supported by the GenCore 6 package, offered by Biocceleration. Performance benchmarks of this software package show up to 10 fold speed acceleration relative to standard software implementation on the same processor.\nCurrently the only company in bioinformatics to offer both SSE and FPGA solutions accelerating Smith\u2013Waterman, CLC bio has achieved speed-ups of more than 110 over standard software implementations with CLC Bioinformatics Cube[citation needed]\nThe fastest implementation of the algorithm on CPUs with SSSE3 can be found the SWIPE software (Rognes, 2011),[23] which is available under the GNU Affero General Public License. In parallel, this software compares residues from sixteen different database sequences to one query residue. Using a 375 residue query sequence a speed of 106 billion cell updates per second (GCUPS) was achieved on a dual Intel Xeon X5650 six-core processor system, which is over six times more rapid than software based on Farrar's 'striped' approach. It is faster than BLAST when using the BLOSUM50 matrix.\nThere also exists diagonalsw, a C and C++ implementation of the Smith\u2013Waterman algorithm with the SIMD instruction sets (SSE4.1 for the x86 platform and AltiVec for the PowerPC platform). It is licensed under the open-source MIT license.\nIn 2008, Farrar[24] described a port of the Striped Smith\u2013Waterman[13] to the Cell Broadband Engine and reported speeds of 32 and 12 GCUPS on an IBM QS20 blade and a Sony PlayStation 3, respectively.", 
    "dbpedia_url": "http://dbpedia.org/resource/Smith\u2013Waterman_algorithm", 
    "wikipedia_url": "http://en.wikipedia.org/wiki/Smith\u2013Waterman_algorithm\n"
}